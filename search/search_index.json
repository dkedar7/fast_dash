{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Open source, Python-based tool to build prototypes lightning fast \u26a1 Website: https://fastdash.app/ Documentation: https://docs.fastdash.app/ Source code: https://github.com/dkedar7/fast_dash/ Installation: pip install fast-dash Fast Dash is a Python module that makes the development of web applications fast and easy. It is built on top of Plotly Dash and can be used to build web interfaces for Machine Learning models or to showcase any proof of concept without the hassle of developing UI from scratch. Simple example With Fast Dash's decorator fastdash , it's a breeze to deploy any Python function as a web app. Here's how to use it to write your first Fast Dash app: from fast_dash import fastdash @fastdash def text_to_text_function ( input_text ): return input_text # * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) And just like that (\ud83e\ude84), we have a completely functional interactive app! Output: Fast Dash can read additional details about a function, like its name, input and output types, docstring, and uses this information to infer which components to use. For example, here's how to deploy an app that takes a string and an integer as inputs and return some text. from fast_dash import fastdash @fastdash def display_selected_text_and_number ( text : str , number : int ) -> str : \"Simply display the selected text and number\" processed_text = f 'Selected text is { text } and the number is { number } .' return processed_text # * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) Output: And with just a few more lines, we can add a title icon, subheader and other social branding details. from fast_dash import fastdash @fastdash ( title_image_path = 'https://raw.githubusercontent.com/dkedar7/fast_dash/main/docs/assets/favicon.jpg' , github_url = 'https://github.com/dkedar7/fast_dash' , linkedin_url = 'https://linkedin.com/in/dkedar7' , twitter_url = 'https://twitter.com/dkedar' ) def display_selected_text_and_number ( text : str , number : int ) -> str : \"Simply display the selected text and number\" processed_text = f 'Selected text is { text } and the number is { number } .' return processed_text Output: Read different ways to build Fast Dash apps and additional details by navigating to the project documentation . Key features Launch an app only by specifying the types of inputs and outputs. Use multiple input and output components simultaneously. Flask-based backend allows easy scalability and customizability. Build fast, share and iterate. Some features are coming up in future releases: More input and output components. Deploy to Heroku and Google Cloud. and many more. Community Fast Dash is built on open-source. You are encouraged to share your own projects, which will be highlighted on a common community gallery (coming up). Credits Fast Dash is built using Plotly Dash . Dash's Flask-based backend enables Fast Dash apps to scale easily and makes them highly compatibility with other integration services. This project is partially inspired from gradio . The project template was created with Cookiecutter and zillionare/cookiecutter-pypackage .","title":"Home"},{"location":"#overview","text":"Open source, Python-based tool to build prototypes lightning fast \u26a1 Website: https://fastdash.app/ Documentation: https://docs.fastdash.app/ Source code: https://github.com/dkedar7/fast_dash/ Installation: pip install fast-dash Fast Dash is a Python module that makes the development of web applications fast and easy. It is built on top of Plotly Dash and can be used to build web interfaces for Machine Learning models or to showcase any proof of concept without the hassle of developing UI from scratch.","title":"Overview"},{"location":"#simple-example","text":"With Fast Dash's decorator fastdash , it's a breeze to deploy any Python function as a web app. Here's how to use it to write your first Fast Dash app: from fast_dash import fastdash @fastdash def text_to_text_function ( input_text ): return input_text # * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) And just like that (\ud83e\ude84), we have a completely functional interactive app! Output: Fast Dash can read additional details about a function, like its name, input and output types, docstring, and uses this information to infer which components to use. For example, here's how to deploy an app that takes a string and an integer as inputs and return some text. from fast_dash import fastdash @fastdash def display_selected_text_and_number ( text : str , number : int ) -> str : \"Simply display the selected text and number\" processed_text = f 'Selected text is { text } and the number is { number } .' return processed_text # * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) Output: And with just a few more lines, we can add a title icon, subheader and other social branding details. from fast_dash import fastdash @fastdash ( title_image_path = 'https://raw.githubusercontent.com/dkedar7/fast_dash/main/docs/assets/favicon.jpg' , github_url = 'https://github.com/dkedar7/fast_dash' , linkedin_url = 'https://linkedin.com/in/dkedar7' , twitter_url = 'https://twitter.com/dkedar' ) def display_selected_text_and_number ( text : str , number : int ) -> str : \"Simply display the selected text and number\" processed_text = f 'Selected text is { text } and the number is { number } .' return processed_text Output: Read different ways to build Fast Dash apps and additional details by navigating to the project documentation .","title":"Simple example"},{"location":"#key-features","text":"Launch an app only by specifying the types of inputs and outputs. Use multiple input and output components simultaneously. Flask-based backend allows easy scalability and customizability. Build fast, share and iterate. Some features are coming up in future releases: More input and output components. Deploy to Heroku and Google Cloud. and many more.","title":"Key features"},{"location":"#community","text":"Fast Dash is built on open-source. You are encouraged to share your own projects, which will be highlighted on a common community gallery (coming up).","title":"Community"},{"location":"#credits","text":"Fast Dash is built using Plotly Dash . Dash's Flask-based backend enables Fast Dash apps to scale easily and makes them highly compatibility with other integration services. This project is partially inspired from gradio . The project template was created with Cookiecutter and zillionare/cookiecutter-pypackage .","title":"Credits"},{"location":"api/","text":"Top-level package for Fast Dash. FastDash Fast Dash app object containing automatically generated UI components and callbacks. This is the primary Fast Dash data structure. Can be thought of as a wrapper around a flask WSGI application. It has in-built support for automated UI generation and sets all parameters required for Fast Dash app deployment. Source code in fast_dash/fast_dash.pyclass FastDash : \"\"\" Fast Dash app object containing automatically generated UI components and callbacks. This is the primary Fast Dash data structure. Can be thought of as a wrapper around a flask WSGI application. It has in-built support for automated UI generation and sets all parameters required for Fast Dash app deployment. \"\"\" def __init__ ( self , callback_fn , inputs = None , outputs = None , title = None , title_image_path = None , subheader = None , github_url = None , linkedin_url = None , twitter_url = None , navbar = True , footer = True , theme = \"JOURNAL\" , update_live = False , mode = None , minimal = False , disable_logs = False , ** kwargs ): \"\"\" Args: callback_fn (func): Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components. inputs (Fast component, list of Fast components, optional): Components to represent inputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all `Text`. outputs (Fast component, list of Fast components, optional): Components to represent outputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all `Text`. title (str, optional): Title given to the app. Defaults to None. If `None`, function name (assumed to be in snake case) is converted to title case. title_image_path (str, optional): Path (local or URL) of the app title image. Defaults to None. subheader (str, optional): Subheader of the app, displayed below the title image and title. Defaults to None. If `None`, Fast Dash tries to use the callback function's docstring instead. github_url (str, optional): GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None. linkedin_url (str, optional): LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None. twitter_url (str, optional): Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None. navbar (bool, optional): Display navbar. Defaults to True. footer (bool, optional): Display footer. Defaults to True. theme (str, optional): Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/. update_live (bool, optional): Enable hot reloading. Defaults to False. mode (str, optional): Mode in which to launch the app. Acceptable options are `None`, `jupyterlab`, `inline`, 'external`. Defaults to None. minimal (bool, optional): Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False. disable_logs (bool, optional): Hide app logs. Sets logger level to `ERROR`. Defaults to False. \"\"\" self . callback_fn = callback_fn self . inputs = ( _infer_components ( callback_fn , is_input = True ) if inputs is None else inputs ) self . outputs = ( _infer_components ( callback_fn , is_input = False ) if outputs is None else outputs ) self . update_live = update_live self . mode = mode self . disable_logs = disable_logs self . kwargs = kwargs if self . disable_logs is True : log = logging . getLogger ( \"werkzeug\" ) log . setLevel ( logging . ERROR ) else : log = logging . getLogger ( \"werkzeug\" ) log . setLevel ( logging . DEBUG ) if title is None : title = re . sub ( \"[^0-9a-zA-Z]+\" , \" \" , callback_fn . __name__ ) . title () self . title = title self . title_image_path = title_image_path self . subtext = subheader if subheader is not None else callback_fn . __doc__ self . github_url = github_url self . linkedin_url = linkedin_url self . twitter_url = twitter_url self . navbar = navbar self . footer = footer self . minimal = minimal # Assign IDs to components self . inputs_with_ids = _assign_ids_to_inputs ( self . inputs , self . callback_fn ) self . outputs_with_ids = _assign_ids_to_outputs ( self . outputs ) self . ack_mask = [ True if input_ . ack is not None else False for input_ in self . inputs_with_ids ] # Default state of outputs self . output_state_default = [ output_ . placeholder for output_ in self . outputs_with_ids ] # Define Flask server server = flask . Flask ( __name__ ) external_stylesheets = [ theme_mapper ( theme ), \"https://use.fontawesome.com/releases/v5.9.0/css/all.css\" , ] source = dash . Dash if self . mode is not None : try : from jupyter_dash import JupyterDash source = JupyterDash except ImportError as e : self . mode = None warnings . warn ( str ( e )) warnings . warn ( \"Ignoring mode argument\" ) self . app = source ( __name__ , external_stylesheets = external_stylesheets , server = server , meta_tags = [ { \"name\" : \"viewport\" , \"content\" : \"width=device-width, initial-scale=1.0, maximum-scale=1.8, minimum-scale=0.5\" , } ], ) # Define app title self . app . title = self . title # Intialize layout self . set_layout () # Register callbacks self . register_callback_fn () # Keep track of the number of clicks self . submit_clicks = 0 self . reset_clicks = 0 self . app_initialized = False # Allow easier access to Dash server self . server = self . app . server def run ( self , ** kwargs ): self . server . run ( ** kwargs ) if self . mode is None else self . app . run_server ( mode = self . mode , ** kwargs ) def run_server ( self , ** kwargs ): self . app . run_server ( ** kwargs ) if self . mode is None else self . app . run_server ( mode = self . mode , ** kwargs ) def set_layout ( self ): if self . inputs is not None : input_groups = _make_input_groups ( self . inputs_with_ids , self . update_live ) if self . outputs is not None : output_groups = _make_output_groups ( self . outputs_with_ids , self . update_live ) default_layout = DefaultLayout ( inputs = input_groups , outputs = output_groups , title = self . title , title_image_path = self . title_image_path , subtext = self . subtext , github_url = self . github_url , linkedin_url = self . linkedin_url , twitter_url = self . twitter_url , navbar = self . navbar , footer = self . footer , minimal = self . minimal , ) self . app . layout = default_layout . layout def register_callback_fn ( self ): @self . app . callback ( [ Output ( component_id = output_ . id , component_property = output_ . component_property , ) for output_ in self . outputs_with_ids ] + [ Output ( component_id = input_ . ack . id , component_property = input_ . ack . component_property , ) for input_ in self . inputs_with_ids ], [ Input ( component_id = input_ . id , component_property = input_ . component_property ) for input_ in self . inputs_with_ids ] + [ Input ( component_id = \"reset_inputs\" , component_property = \"n_clicks\" ), Input ( component_id = \"submit_inputs\" , component_property = \"n_clicks\" ), ], ) def process_input ( * args ): reset_button = args [ - 2 ] submit_button = args [ - 1 ] ack_components = [ ack if mask is True else None for mask , ack in zip ( self . ack_mask , list ( args [: - 2 ])) ] if submit_button > self . submit_clicks or ( self . update_live is True and None not in args ): self . app_initialized = True self . submit_clicks = submit_button output_state = self . callback_fn ( * args [: - 2 ]) if isinstance ( output_state , tuple ): self . output_state = list ( output_state ) return self . output_state + ack_components self . output_state = [ output_state ] return self . output_state + ack_components elif reset_button > self . reset_clicks : self . reset_clicks = reset_button self . output_state = self . output_state_default return self . output_state + ack_components elif self . app_initialized : return self . output_state + ack_components else : return self . output_state_default + ack_components __init__ ( callback_fn , inputs = None , outputs = None , title = None , title_image_path = None , subheader = None , github_url = None , linkedin_url = None , twitter_url = None , navbar = True , footer = True , theme = 'JOURNAL' , update_live = False , mode = None , minimal = False , disable_logs = False , ** kwargs ) Parameters: Name Type Description Default callback_fn func Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components. required inputs Fast component, list of Fast components Components to represent inputs of the callback function. Defaults to None. If None , Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all Text . None outputs Fast component, list of Fast components Components to represent outputs of the callback function. Defaults to None. If None , Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all Text . None title str Title given to the app. Defaults to None. If None , function name (assumed to be in snake case) is converted to title case. None title_image_path str Path (local or URL) of the app title image. Defaults to None. None subheader str Subheader of the app, displayed below the title image and title. Defaults to None. If None , Fast Dash tries to use the callback function's docstring instead. None github_url str GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None. None linkedin_url str LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None. None twitter_url str Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None. None navbar bool Display navbar. Defaults to True. True footer bool Display footer. Defaults to True. True theme str Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/. 'JOURNAL' update_live bool Enable hot reloading. Defaults to False. False mode str Mode in which to launch the app. Acceptable options are None , jupyterlab , inline , 'external`. Defaults to None. None minimal bool Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False. False disable_logs bool Hide app logs. Sets logger level to ERROR . Defaults to False. False Source code in fast_dash/fast_dash.pydef __init__ ( self , callback_fn , inputs = None , outputs = None , title = None , title_image_path = None , subheader = None , github_url = None , linkedin_url = None , twitter_url = None , navbar = True , footer = True , theme = \"JOURNAL\" , update_live = False , mode = None , minimal = False , disable_logs = False , ** kwargs ): \"\"\" Args: callback_fn (func): Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components. inputs (Fast component, list of Fast components, optional): Components to represent inputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all `Text`. outputs (Fast component, list of Fast components, optional): Components to represent outputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all `Text`. title (str, optional): Title given to the app. Defaults to None. If `None`, function name (assumed to be in snake case) is converted to title case. title_image_path (str, optional): Path (local or URL) of the app title image. Defaults to None. subheader (str, optional): Subheader of the app, displayed below the title image and title. Defaults to None. If `None`, Fast Dash tries to use the callback function's docstring instead. github_url (str, optional): GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None. linkedin_url (str, optional): LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None. twitter_url (str, optional): Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None. navbar (bool, optional): Display navbar. Defaults to True. footer (bool, optional): Display footer. Defaults to True. theme (str, optional): Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/. update_live (bool, optional): Enable hot reloading. Defaults to False. mode (str, optional): Mode in which to launch the app. Acceptable options are `None`, `jupyterlab`, `inline`, 'external`. Defaults to None. minimal (bool, optional): Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False. disable_logs (bool, optional): Hide app logs. Sets logger level to `ERROR`. Defaults to False. \"\"\" self . callback_fn = callback_fn self . inputs = ( _infer_components ( callback_fn , is_input = True ) if inputs is None else inputs ) self . outputs = ( _infer_components ( callback_fn , is_input = False ) if outputs is None else outputs ) self . update_live = update_live self . mode = mode self . disable_logs = disable_logs self . kwargs = kwargs if self . disable_logs is True : log = logging . getLogger ( \"werkzeug\" ) log . setLevel ( logging . ERROR ) else : log = logging . getLogger ( \"werkzeug\" ) log . setLevel ( logging . DEBUG ) if title is None : title = re . sub ( \"[^0-9a-zA-Z]+\" , \" \" , callback_fn . __name__ ) . title () self . title = title self . title_image_path = title_image_path self . subtext = subheader if subheader is not None else callback_fn . __doc__ self . github_url = github_url self . linkedin_url = linkedin_url self . twitter_url = twitter_url self . navbar = navbar self . footer = footer self . minimal = minimal # Assign IDs to components self . inputs_with_ids = _assign_ids_to_inputs ( self . inputs , self . callback_fn ) self . outputs_with_ids = _assign_ids_to_outputs ( self . outputs ) self . ack_mask = [ True if input_ . ack is not None else False for input_ in self . inputs_with_ids ] # Default state of outputs self . output_state_default = [ output_ . placeholder for output_ in self . outputs_with_ids ] # Define Flask server server = flask . Flask ( __name__ ) external_stylesheets = [ theme_mapper ( theme ), \"https://use.fontawesome.com/releases/v5.9.0/css/all.css\" , ] source = dash . Dash if self . mode is not None : try : from jupyter_dash import JupyterDash source = JupyterDash except ImportError as e : self . mode = None warnings . warn ( str ( e )) warnings . warn ( \"Ignoring mode argument\" ) self . app = source ( __name__ , external_stylesheets = external_stylesheets , server = server , meta_tags = [ { \"name\" : \"viewport\" , \"content\" : \"width=device-width, initial-scale=1.0, maximum-scale=1.8, minimum-scale=0.5\" , } ], ) # Define app title self . app . title = self . title # Intialize layout self . set_layout () # Register callbacks self . register_callback_fn () # Keep track of the number of clicks self . submit_clicks = 0 self . reset_clicks = 0 self . app_initialized = False # Allow easier access to Dash server self . server = self . app . server Fastify ( component , component_property , ack = None , placeholder = None , label_ = None ) Modify a Dash component to a FastComponent. Parameters: Name Type Description Default component type required component_property type required ack type None placeholder type None label_ type None Returns: Type Description Source code in fast_dash/utils.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def Fastify ( component , component_property , ack = None , placeholder = None , label_ = None ): \"\"\" Modify a Dash component to a FastComponent. Args: component (type): component_property (type): ack (type, optional): placeholder (type, optional): label_ (type, optional): Returns: [type]: [description] \"\"\" component . component_property = component_property component . ack = ack component . label_ = label_ component . placeholder = placeholder return component fastdash ( _callback_fn = None , * , inputs = None , outputs = None , title = None , title_image_path = None , subheader = None , github_url = None , linkedin_url = None , twitter_url = None , navbar = True , footer = True , theme = 'JOURNAL' , update_live = False , mode = None , minimal = False , disable_logs = False , ** run_kwargs ) Decorator for the FastDash class. Use the decorated Python callback functions and deployes it using the chosen mode. Parameters: Name Type Description Default callback_fn func Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components. required inputs Fast component, list of Fast components Components to represent inputs of the callback function. Defaults to None. If None , Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all Text . None outputs Fast component, list of Fast components Components to represent outputs of the callback function. Defaults to None. If None , Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all Text . None title str Title given to the app. Defaults to None. If None , function name (assumed to be in snake case) is converted to title case. None title_image_path str Path (local or URL) of the app title image. Defaults to None. None subheader str Subheader of the app, displayed below the title image and title. Defaults to None. If None , Fast Dash tries to use the callback function's docstring instead. None github_url str GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None. None linkedin_url str LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None. None twitter_url str Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None. None navbar bool Display navbar. Defaults to True. True footer bool Display footer. Defaults to True. True theme str Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/. 'JOURNAL' update_live bool Enable hot reloading. Defaults to False. False mode str Mode in which to launch the app. Acceptable options are None , jupyterlab , inline , 'external`. Defaults to None. None minimal bool Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False. False disable_logs bool Hide app logs. Sets logger level to ERROR . Defaults to False. False Source code in fast_dash/fast_dash.py 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 def fastdash ( _callback_fn = None , * , inputs = None , outputs = None , title = None , title_image_path = None , subheader = None , github_url = None , linkedin_url = None , twitter_url = None , navbar = True , footer = True , theme = \"JOURNAL\" , update_live = False , mode = None , minimal = False , disable_logs = False , ** run_kwargs ): \"\"\" Decorator for the `FastDash` class. Use the decorated Python callback functions and deployes it using the chosen mode. Args: callback_fn (func): Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components. inputs (Fast component, list of Fast components, optional): Components to represent inputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all `Text`. outputs (Fast component, list of Fast components, optional): Components to represent outputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all `Text`. title (str, optional): Title given to the app. Defaults to None. If `None`, function name (assumed to be in snake case) is converted to title case. title_image_path (str, optional): Path (local or URL) of the app title image. Defaults to None. subheader (str, optional): Subheader of the app, displayed below the title image and title. Defaults to None. If `None`, Fast Dash tries to use the callback function's docstring instead. github_url (str, optional): GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None. linkedin_url (str, optional): LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None. twitter_url (str, optional): Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None. navbar (bool, optional): Display navbar. Defaults to True. footer (bool, optional): Display footer. Defaults to True. theme (str, optional): Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/. update_live (bool, optional): Enable hot reloading. Defaults to False. mode (str, optional): Mode in which to launch the app. Acceptable options are `None`, `jupyterlab`, `inline`, 'external`. Defaults to None. minimal (bool, optional): Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False. disable_logs (bool, optional): Hide app logs. Sets logger level to `ERROR`. Defaults to False. \"\"\" def decorator_fastdash ( callback_fn ): \"Decorator for callback_fn\" @functools . wraps ( callback_fn ) def wrapper_fastdash ( ** kwargs ): app = FastDash ( callback_fn = callback_fn , ** kwargs ) app . run ( ** run_kwargs ) return callback_fn return wrapper_fastdash ( inputs = inputs , outputs = outputs , title = title , title_image_path = title_image_path , subheader = subheader , github_url = github_url , linkedin_url = linkedin_url , twitter_url = twitter_url , navbar = navbar , footer = footer , theme = theme , update_live = update_live , mode = mode , minimal = minimal , disable_logs = disable_logs , ** run_kwargs ) # If the decorator is called with arguments if _callback_fn is None : return decorator_fastdash # If the decorator is called without arguments. Use default input and output values else : return decorator_fastdash ( _callback_fn )","title":"Modules"},{"location":"api/#fast_dash.FastDash","text":"Fast Dash app object containing automatically generated UI components and callbacks. This is the primary Fast Dash data structure. Can be thought of as a wrapper around a flask WSGI application. It has in-built support for automated UI generation and sets all parameters required for Fast Dash app deployment. Source code in fast_dash/fast_dash.pyclass FastDash : \"\"\" Fast Dash app object containing automatically generated UI components and callbacks. This is the primary Fast Dash data structure. Can be thought of as a wrapper around a flask WSGI application. It has in-built support for automated UI generation and sets all parameters required for Fast Dash app deployment. \"\"\" def __init__ ( self , callback_fn , inputs = None , outputs = None , title = None , title_image_path = None , subheader = None , github_url = None , linkedin_url = None , twitter_url = None , navbar = True , footer = True , theme = \"JOURNAL\" , update_live = False , mode = None , minimal = False , disable_logs = False , ** kwargs ): \"\"\" Args: callback_fn (func): Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components. inputs (Fast component, list of Fast components, optional): Components to represent inputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all `Text`. outputs (Fast component, list of Fast components, optional): Components to represent outputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all `Text`. title (str, optional): Title given to the app. Defaults to None. If `None`, function name (assumed to be in snake case) is converted to title case. title_image_path (str, optional): Path (local or URL) of the app title image. Defaults to None. subheader (str, optional): Subheader of the app, displayed below the title image and title. Defaults to None. If `None`, Fast Dash tries to use the callback function's docstring instead. github_url (str, optional): GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None. linkedin_url (str, optional): LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None. twitter_url (str, optional): Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None. navbar (bool, optional): Display navbar. Defaults to True. footer (bool, optional): Display footer. Defaults to True. theme (str, optional): Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/. update_live (bool, optional): Enable hot reloading. Defaults to False. mode (str, optional): Mode in which to launch the app. Acceptable options are `None`, `jupyterlab`, `inline`, 'external`. Defaults to None. minimal (bool, optional): Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False. disable_logs (bool, optional): Hide app logs. Sets logger level to `ERROR`. Defaults to False. \"\"\" self . callback_fn = callback_fn self . inputs = ( _infer_components ( callback_fn , is_input = True ) if inputs is None else inputs ) self . outputs = ( _infer_components ( callback_fn , is_input = False ) if outputs is None else outputs ) self . update_live = update_live self . mode = mode self . disable_logs = disable_logs self . kwargs = kwargs if self . disable_logs is True : log = logging . getLogger ( \"werkzeug\" ) log . setLevel ( logging . ERROR ) else : log = logging . getLogger ( \"werkzeug\" ) log . setLevel ( logging . DEBUG ) if title is None : title = re . sub ( \"[^0-9a-zA-Z]+\" , \" \" , callback_fn . __name__ ) . title () self . title = title self . title_image_path = title_image_path self . subtext = subheader if subheader is not None else callback_fn . __doc__ self . github_url = github_url self . linkedin_url = linkedin_url self . twitter_url = twitter_url self . navbar = navbar self . footer = footer self . minimal = minimal # Assign IDs to components self . inputs_with_ids = _assign_ids_to_inputs ( self . inputs , self . callback_fn ) self . outputs_with_ids = _assign_ids_to_outputs ( self . outputs ) self . ack_mask = [ True if input_ . ack is not None else False for input_ in self . inputs_with_ids ] # Default state of outputs self . output_state_default = [ output_ . placeholder for output_ in self . outputs_with_ids ] # Define Flask server server = flask . Flask ( __name__ ) external_stylesheets = [ theme_mapper ( theme ), \"https://use.fontawesome.com/releases/v5.9.0/css/all.css\" , ] source = dash . Dash if self . mode is not None : try : from jupyter_dash import JupyterDash source = JupyterDash except ImportError as e : self . mode = None warnings . warn ( str ( e )) warnings . warn ( \"Ignoring mode argument\" ) self . app = source ( __name__ , external_stylesheets = external_stylesheets , server = server , meta_tags = [ { \"name\" : \"viewport\" , \"content\" : \"width=device-width, initial-scale=1.0, maximum-scale=1.8, minimum-scale=0.5\" , } ], ) # Define app title self . app . title = self . title # Intialize layout self . set_layout () # Register callbacks self . register_callback_fn () # Keep track of the number of clicks self . submit_clicks = 0 self . reset_clicks = 0 self . app_initialized = False # Allow easier access to Dash server self . server = self . app . server def run ( self , ** kwargs ): self . server . run ( ** kwargs ) if self . mode is None else self . app . run_server ( mode = self . mode , ** kwargs ) def run_server ( self , ** kwargs ): self . app . run_server ( ** kwargs ) if self . mode is None else self . app . run_server ( mode = self . mode , ** kwargs ) def set_layout ( self ): if self . inputs is not None : input_groups = _make_input_groups ( self . inputs_with_ids , self . update_live ) if self . outputs is not None : output_groups = _make_output_groups ( self . outputs_with_ids , self . update_live ) default_layout = DefaultLayout ( inputs = input_groups , outputs = output_groups , title = self . title , title_image_path = self . title_image_path , subtext = self . subtext , github_url = self . github_url , linkedin_url = self . linkedin_url , twitter_url = self . twitter_url , navbar = self . navbar , footer = self . footer , minimal = self . minimal , ) self . app . layout = default_layout . layout def register_callback_fn ( self ): @self . app . callback ( [ Output ( component_id = output_ . id , component_property = output_ . component_property , ) for output_ in self . outputs_with_ids ] + [ Output ( component_id = input_ . ack . id , component_property = input_ . ack . component_property , ) for input_ in self . inputs_with_ids ], [ Input ( component_id = input_ . id , component_property = input_ . component_property ) for input_ in self . inputs_with_ids ] + [ Input ( component_id = \"reset_inputs\" , component_property = \"n_clicks\" ), Input ( component_id = \"submit_inputs\" , component_property = \"n_clicks\" ), ], ) def process_input ( * args ): reset_button = args [ - 2 ] submit_button = args [ - 1 ] ack_components = [ ack if mask is True else None for mask , ack in zip ( self . ack_mask , list ( args [: - 2 ])) ] if submit_button > self . submit_clicks or ( self . update_live is True and None not in args ): self . app_initialized = True self . submit_clicks = submit_button output_state = self . callback_fn ( * args [: - 2 ]) if isinstance ( output_state , tuple ): self . output_state = list ( output_state ) return self . output_state + ack_components self . output_state = [ output_state ] return self . output_state + ack_components elif reset_button > self . reset_clicks : self . reset_clicks = reset_button self . output_state = self . output_state_default return self . output_state + ack_components elif self . app_initialized : return self . output_state + ack_components else : return self . output_state_default + ack_components","title":"FastDash"},{"location":"api/#fast_dash.fast_dash.FastDash.__init__","text":"Parameters: Name Type Description Default callback_fn func Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components. required inputs Fast component, list of Fast components Components to represent inputs of the callback function. Defaults to None. If None , Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all Text . None outputs Fast component, list of Fast components Components to represent outputs of the callback function. Defaults to None. If None , Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all Text . None title str Title given to the app. Defaults to None. If None , function name (assumed to be in snake case) is converted to title case. None title_image_path str Path (local or URL) of the app title image. Defaults to None. None subheader str Subheader of the app, displayed below the title image and title. Defaults to None. If None , Fast Dash tries to use the callback function's docstring instead. None github_url str GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None. None linkedin_url str LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None. None twitter_url str Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None. None navbar bool Display navbar. Defaults to True. True footer bool Display footer. Defaults to True. True theme str Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/. 'JOURNAL' update_live bool Enable hot reloading. Defaults to False. False mode str Mode in which to launch the app. Acceptable options are None , jupyterlab , inline , 'external`. Defaults to None. None minimal bool Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False. False disable_logs bool Hide app logs. Sets logger level to ERROR . Defaults to False. False Source code in fast_dash/fast_dash.pydef __init__ ( self , callback_fn , inputs = None , outputs = None , title = None , title_image_path = None , subheader = None , github_url = None , linkedin_url = None , twitter_url = None , navbar = True , footer = True , theme = \"JOURNAL\" , update_live = False , mode = None , minimal = False , disable_logs = False , ** kwargs ): \"\"\" Args: callback_fn (func): Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components. inputs (Fast component, list of Fast components, optional): Components to represent inputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all `Text`. outputs (Fast component, list of Fast components, optional): Components to represent outputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all `Text`. title (str, optional): Title given to the app. Defaults to None. If `None`, function name (assumed to be in snake case) is converted to title case. title_image_path (str, optional): Path (local or URL) of the app title image. Defaults to None. subheader (str, optional): Subheader of the app, displayed below the title image and title. Defaults to None. If `None`, Fast Dash tries to use the callback function's docstring instead. github_url (str, optional): GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None. linkedin_url (str, optional): LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None. twitter_url (str, optional): Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None. navbar (bool, optional): Display navbar. Defaults to True. footer (bool, optional): Display footer. Defaults to True. theme (str, optional): Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/. update_live (bool, optional): Enable hot reloading. Defaults to False. mode (str, optional): Mode in which to launch the app. Acceptable options are `None`, `jupyterlab`, `inline`, 'external`. Defaults to None. minimal (bool, optional): Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False. disable_logs (bool, optional): Hide app logs. Sets logger level to `ERROR`. Defaults to False. \"\"\" self . callback_fn = callback_fn self . inputs = ( _infer_components ( callback_fn , is_input = True ) if inputs is None else inputs ) self . outputs = ( _infer_components ( callback_fn , is_input = False ) if outputs is None else outputs ) self . update_live = update_live self . mode = mode self . disable_logs = disable_logs self . kwargs = kwargs if self . disable_logs is True : log = logging . getLogger ( \"werkzeug\" ) log . setLevel ( logging . ERROR ) else : log = logging . getLogger ( \"werkzeug\" ) log . setLevel ( logging . DEBUG ) if title is None : title = re . sub ( \"[^0-9a-zA-Z]+\" , \" \" , callback_fn . __name__ ) . title () self . title = title self . title_image_path = title_image_path self . subtext = subheader if subheader is not None else callback_fn . __doc__ self . github_url = github_url self . linkedin_url = linkedin_url self . twitter_url = twitter_url self . navbar = navbar self . footer = footer self . minimal = minimal # Assign IDs to components self . inputs_with_ids = _assign_ids_to_inputs ( self . inputs , self . callback_fn ) self . outputs_with_ids = _assign_ids_to_outputs ( self . outputs ) self . ack_mask = [ True if input_ . ack is not None else False for input_ in self . inputs_with_ids ] # Default state of outputs self . output_state_default = [ output_ . placeholder for output_ in self . outputs_with_ids ] # Define Flask server server = flask . Flask ( __name__ ) external_stylesheets = [ theme_mapper ( theme ), \"https://use.fontawesome.com/releases/v5.9.0/css/all.css\" , ] source = dash . Dash if self . mode is not None : try : from jupyter_dash import JupyterDash source = JupyterDash except ImportError as e : self . mode = None warnings . warn ( str ( e )) warnings . warn ( \"Ignoring mode argument\" ) self . app = source ( __name__ , external_stylesheets = external_stylesheets , server = server , meta_tags = [ { \"name\" : \"viewport\" , \"content\" : \"width=device-width, initial-scale=1.0, maximum-scale=1.8, minimum-scale=0.5\" , } ], ) # Define app title self . app . title = self . title # Intialize layout self . set_layout () # Register callbacks self . register_callback_fn () # Keep track of the number of clicks self . submit_clicks = 0 self . reset_clicks = 0 self . app_initialized = False # Allow easier access to Dash server self . server = self . app . server","title":"__init__()"},{"location":"api/#fast_dash.Fastify","text":"Modify a Dash component to a FastComponent. Parameters: Name Type Description Default component type required component_property type required ack type None placeholder type None label_ type None Returns: Type Description Source code in fast_dash/utils.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def Fastify ( component , component_property , ack = None , placeholder = None , label_ = None ): \"\"\" Modify a Dash component to a FastComponent. Args: component (type): component_property (type): ack (type, optional): placeholder (type, optional): label_ (type, optional): Returns: [type]: [description] \"\"\" component . component_property = component_property component . ack = ack component . label_ = label_ component . placeholder = placeholder return component","title":"Fastify()"},{"location":"api/#fast_dash.fastdash","text":"Decorator for the FastDash class. Use the decorated Python callback functions and deployes it using the chosen mode. Parameters: Name Type Description Default callback_fn func Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components. required inputs Fast component, list of Fast components Components to represent inputs of the callback function. Defaults to None. If None , Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all Text . None outputs Fast component, list of Fast components Components to represent outputs of the callback function. Defaults to None. If None , Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all Text . None title str Title given to the app. Defaults to None. If None , function name (assumed to be in snake case) is converted to title case. None title_image_path str Path (local or URL) of the app title image. Defaults to None. None subheader str Subheader of the app, displayed below the title image and title. Defaults to None. If None , Fast Dash tries to use the callback function's docstring instead. None github_url str GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None. None linkedin_url str LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None. None twitter_url str Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None. None navbar bool Display navbar. Defaults to True. True footer bool Display footer. Defaults to True. True theme str Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/. 'JOURNAL' update_live bool Enable hot reloading. Defaults to False. False mode str Mode in which to launch the app. Acceptable options are None , jupyterlab , inline , 'external`. Defaults to None. None minimal bool Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False. False disable_logs bool Hide app logs. Sets logger level to ERROR . Defaults to False. False Source code in fast_dash/fast_dash.py 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 def fastdash ( _callback_fn = None , * , inputs = None , outputs = None , title = None , title_image_path = None , subheader = None , github_url = None , linkedin_url = None , twitter_url = None , navbar = True , footer = True , theme = \"JOURNAL\" , update_live = False , mode = None , minimal = False , disable_logs = False , ** run_kwargs ): \"\"\" Decorator for the `FastDash` class. Use the decorated Python callback functions and deployes it using the chosen mode. Args: callback_fn (func): Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components. inputs (Fast component, list of Fast components, optional): Components to represent inputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all `Text`. outputs (Fast component, list of Fast components, optional): Components to represent outputs of the callback function. Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all `Text`. title (str, optional): Title given to the app. Defaults to None. If `None`, function name (assumed to be in snake case) is converted to title case. title_image_path (str, optional): Path (local or URL) of the app title image. Defaults to None. subheader (str, optional): Subheader of the app, displayed below the title image and title. Defaults to None. If `None`, Fast Dash tries to use the callback function's docstring instead. github_url (str, optional): GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None. linkedin_url (str, optional): LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None. twitter_url (str, optional): Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None. navbar (bool, optional): Display navbar. Defaults to True. footer (bool, optional): Display footer. Defaults to True. theme (str, optional): Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/. update_live (bool, optional): Enable hot reloading. Defaults to False. mode (str, optional): Mode in which to launch the app. Acceptable options are `None`, `jupyterlab`, `inline`, 'external`. Defaults to None. minimal (bool, optional): Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False. disable_logs (bool, optional): Hide app logs. Sets logger level to `ERROR`. Defaults to False. \"\"\" def decorator_fastdash ( callback_fn ): \"Decorator for callback_fn\" @functools . wraps ( callback_fn ) def wrapper_fastdash ( ** kwargs ): app = FastDash ( callback_fn = callback_fn , ** kwargs ) app . run ( ** run_kwargs ) return callback_fn return wrapper_fastdash ( inputs = inputs , outputs = outputs , title = title , title_image_path = title_image_path , subheader = subheader , github_url = github_url , linkedin_url = linkedin_url , twitter_url = twitter_url , navbar = navbar , footer = footer , theme = theme , update_live = update_live , mode = mode , minimal = minimal , disable_logs = disable_logs , ** run_kwargs ) # If the decorator is called with arguments if _callback_fn is None : return decorator_fastdash # If the decorator is called without arguments. Use default input and output values else : return decorator_fastdash ( _callback_fn )","title":"fastdash()"},{"location":"authors/","text":"Credits Development Lead Kedar Dabhadkar kedar@fastdash.app Contributors None yet. Why not be the first?","title":"Authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Kedar Dabhadkar kedar@fastdash.app","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs Report bugs at https://github.com/dkedar7/fast_dash/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation Fast Dash could always use more documentation, whether as part of the official Fast Dash docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback The best way to send feedback is to file an issue at https://github.com/dkedar7/fast_dash/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here's how to set up fast_dash for local development. Fork the fast_dash repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/fast_dash.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev 5. Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. 6. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ tox 7. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature 8. Submit a pull request through the GitHub website. Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/dkedar7/fast_dash/actions and make sure that the tests pass for all supported Python versions. Tips $ pytest tests.test_fast_dash To run a subset of tests. Deploying A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: $ poetry patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/dkedar7/fast_dash/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Fast Dash could always use more documentation, whether as part of the official Fast Dash docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/dkedar7/fast_dash/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up fast_dash for local development. Fork the fast_dash repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/fast_dash.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev 5. Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. 6. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ tox 7. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature 8. Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/dkedar7/fast_dash/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ pytest tests.test_fast_dash To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: $ poetry patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History 0.1.7 (2022-08-21) Introduce Fast Dash decorator ( fastdash ) for automatic and quick deployment. Autoinfer input and output components from type hints and default values. Autoinfer title and subheader by inspecting the callback function. New test cases. Modified documentation layout and content. New GitHub Actions workflow to publish documentation only. 0.1.6 (2022-05-09) Navbar and footer are not thinner than before, which makes them less distracting ;) They no longer stick to the top and bottom respectively. Scrolling on the page makes the navbar dissappear! Update live: New live update option! Setting the argument update_live=True removes Submit and Clear buttons. Any action updates the app right away. New spinners: Finally, Fast Dash now has loading spinners to indicate loading outputs. This comes in handy when executing long running scripts. 0.1.5 (2022-04-02) Add examples: Object detection, molecule 3D viewer and UI updates to the existing examples. Easier fastification: Fastify now allows using a complete Dash component as the first argument. Tests: Increase pytest coverage to 95%. 0.1.4 (2022-03-21) New component property allows setting \"acknowledgment\" component! Default app title is 'Prototype'. New UploadImage component uses another html.Img component as acknowledgment. Added a new Neural Style Transfer example. Added examples to pytest cases. 0.1.3 (2022-03-11) Added 3 new examples. Make navbar and footer removable from the app UI. Updated documentation structure. Added Google Cloud Run deployment docs. 0.1.2 (2022-03-06) Supports usage of the same FastComponent multiple times via deepcopy. Correct documentation typos and examples. Added text-to-text examples. Modifications to the Fastify component. 0.1.1 (2022-02-28) First wide release. Adding input, output image functionality. Added mkdocs documentation. 0.1.0 (2022-01-29) First release on PyPI.","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#017-2022-08-21","text":"Introduce Fast Dash decorator ( fastdash ) for automatic and quick deployment. Autoinfer input and output components from type hints and default values. Autoinfer title and subheader by inspecting the callback function. New test cases. Modified documentation layout and content. New GitHub Actions workflow to publish documentation only.","title":"0.1.7 (2022-08-21)"},{"location":"history/#016-2022-05-09","text":"Navbar and footer are not thinner than before, which makes them less distracting ;) They no longer stick to the top and bottom respectively. Scrolling on the page makes the navbar dissappear! Update live: New live update option! Setting the argument update_live=True removes Submit and Clear buttons. Any action updates the app right away. New spinners: Finally, Fast Dash now has loading spinners to indicate loading outputs. This comes in handy when executing long running scripts.","title":"0.1.6 (2022-05-09)"},{"location":"history/#015-2022-04-02","text":"Add examples: Object detection, molecule 3D viewer and UI updates to the existing examples. Easier fastification: Fastify now allows using a complete Dash component as the first argument. Tests: Increase pytest coverage to 95%.","title":"0.1.5 (2022-04-02)"},{"location":"history/#014-2022-03-21","text":"New component property allows setting \"acknowledgment\" component! Default app title is 'Prototype'. New UploadImage component uses another html.Img component as acknowledgment. Added a new Neural Style Transfer example. Added examples to pytest cases.","title":"0.1.4 (2022-03-21)"},{"location":"history/#013-2022-03-11","text":"Added 3 new examples. Make navbar and footer removable from the app UI. Updated documentation structure. Added Google Cloud Run deployment docs.","title":"0.1.3 (2022-03-11)"},{"location":"history/#012-2022-03-06","text":"Supports usage of the same FastComponent multiple times via deepcopy. Correct documentation typos and examples. Added text-to-text examples. Modifications to the Fastify component.","title":"0.1.2 (2022-03-06)"},{"location":"history/#011-2022-02-28","text":"First wide release. Adding input, output image functionality. Added mkdocs documentation.","title":"0.1.1 (2022-02-28)"},{"location":"history/#010-2022-01-29","text":"First release on PyPI.","title":"0.1.0 (2022-01-29)"},{"location":"installation/","text":"Installation Stable release To install Fast Dash, run this command in your terminal: $ pip install fast-dash This is the preferred method to install Fast Dash, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source The source for Fast Dash can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/dkedar7/fast_dash Or download the tarball : $ curl -OJL https://github.com/dkedar7/fast_dash/tarball/main Once you have a copy of the source, you can install it with: pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Fast Dash, run this command in your terminal: $ pip install fast-dash This is the preferred method to install Fast Dash, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Fast Dash can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/dkedar7/fast_dash Or download the tarball : $ curl -OJL https://github.com/dkedar7/fast_dash/tarball/main Once you have a copy of the source, you can install it with: pip install .","title":"From source"},{"location":"quickstart/","text":"Quickstart Install Fast Dash Let's start by installing Fast Dash. Do that by running: pip install fast-dash Simple Example Here's the simple text to text function from the home page again. 1 2 3 4 5 from fast_dash import fastdash @fastdash def text_to_text_function ( input_text ): return input_text This should spin up your first Fast Dash app! Simple example app Image to image example Fast Dash makes it very easy to work with different types of data types and components. For example, here's the code needed to build an app that receives an uploaded image and returns the same image. 1 2 3 4 5 from fast_dash import fastdash , UploadImage , Image @fastdash def image_to_image ( image : UploadImage ) -> Image : return image This is how the deployed app looks: Simple image to image example app What else is possible There are many customizations that you can make with your app. These include: Choose from different themes Use any Dash component in your app Add custom branding and social media icons Customize pre-built components Live reload Minimal view JupyterLab inline and embedded views By tweaking these configurations, you can easily build web applications for a variety of use cases! Here're a selected few: Fast Dash example gallery","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#install-fast-dash","text":"Let's start by installing Fast Dash. Do that by running: pip install fast-dash","title":"Install Fast Dash"},{"location":"quickstart/#simple-example","text":"Here's the simple text to text function from the home page again. 1 2 3 4 5 from fast_dash import fastdash @fastdash def text_to_text_function ( input_text ): return input_text This should spin up your first Fast Dash app! Simple example app","title":"Simple Example"},{"location":"quickstart/#image-to-image-example","text":"Fast Dash makes it very easy to work with different types of data types and components. For example, here's the code needed to build an app that receives an uploaded image and returns the same image. 1 2 3 4 5 from fast_dash import fastdash , UploadImage , Image @fastdash def image_to_image ( image : UploadImage ) -> Image : return image This is how the deployed app looks: Simple image to image example app","title":"Image to image example"},{"location":"quickstart/#what-else-is-possible","text":"There are many customizations that you can make with your app. These include: Choose from different themes Use any Dash component in your app Add custom branding and social media icons Customize pre-built components Live reload Minimal view JupyterLab inline and embedded views By tweaking these configurations, you can easily build web applications for a variety of use cases! Here're a selected few: Fast Dash example gallery","title":"What else is possible"},{"location":"Examples/english_to_french_translation/","text":"Coming soon ...","title":"2. English to French translation"},{"location":"Examples/english_to_multiple_translation/","text":"Coming soon ...","title":"3. Translate from English to multiple languages"},{"location":"Examples/neural_style_transfer/","text":"Coming soon ...","title":"4. Neural style transfer"},{"location":"Examples/simple_text_to_text/","text":"Coming soon ...","title":"1. Simple text to text"},{"location":"User%20guide/build/","text":"Under the hood Different configurations that go into building a Fast Dash app determine the UI components, themes, how the app is deployed and the nature of user interaction. The intention of this document is to introduce all those options so that you can make the most of Fast Dash. Building your Fast Dash app There are two ways to build a Fast Dash app: Decorating Python functions with the @fastdash decorator from fast_dash import fastdash @fastdash ( ... ) def your_function ( ... ): ... 2. Instantiating an object of the FastDash class from fast_dash import FastDash def your_function ( ... ): ... app = FastDash ( callback_fn = your_function , ... ) app . run () Using the @fastdash decorator is the quickest way to deploy Fast Dash apps but the FastDash class gives us access to the other Fast Dash internals and allows us to tweak them as you see fit. Whereas the fastdash decorator deploys our app at the time of defining our functions, the FastDash class objects are equivalent to Flask's server objects, which allow us to deploy our app later. But we'll understand these difference better throughout the remainder of this document. Note Both the @fastdash decorator and the FastDash class objects are functionally equivalent. The @fastdash decorator is internally powered by the FastDash class. Using decorators saves us the need to specify callback functions as the first argument when defining the FastDash object. Let's first understand how to build Fast Dash apps using the @fastdash decorator and then extend these ideas to the FastDash class. 1. @fastdash decorator What's a decorator? In a nutshell, Python decorators are function wrappers that enrich the functionaltiy of Python functions. Here's an in-depth write-up on Python decorators, what they are and how to build them. But all that we need to know for now is that decorators, themselves, are Python functions which take other functions as arguments and add extra functionality to them. The @fastdash decorator is also just a function (read more here about the implementation in the Modules section) that takes the callback function as the first argument and designs a web app around it. But instead of explicitly specifying the name of the callback function as the first argument, we use this syntax instead: @fastdash ( ... ) def your_function ( ... ) ... How to use @fastdash After we have a Python function that runs without errors, there are only two things we need to do: 1.1. Specify the input and output type hints Fast Dash uses these type hints to determine which components to use. For example, an input with the type hint int will need an input that allows entering integers or a slider. Similarly, an image input will need an upload image or a camera component. What are type hints? First introduced in Python 3.5, type hints are mainly meant to be used IDEs and linters to raise data type mismatch warnings. They not executed during runtime and any errors with type hinting doesn't affect the execution of the function itself. Read more about Python type hints here . def your_function ( a : str , b : int , c : list ) -> str : ... Fast Dash uses this flexbility with defining type hints to allow using Fast Components as hints. More on this in the documentation for Fast Components . So far, Fast Dash understands two types of type hints\u2014one, Python in-built data type classes ( str , int , float , list , dict , etc.), and two, Fast Components . In addition to type hints, the input arguments can also have default values. In the example below, the default values of integer a is Fast , that of b is 5 and c is a list with a default value of [1, 2, 3] . def your_function ( a : str = \"Fast\" , b : int = 5 , c : list = [ 1 , 2 , 3 ]) -> str : ... Fast Dash determines the best Fast Components to use for each input from their hints and default values. Details about which combination of these values result into what components are in the patterns documentation . Fast Components are also valid type hints for Fast Dash. Instead of depending on the hints and default values, using Fast Components is a direct way of telling Fast Dash which components to use. In the example below, UploadImage and Slider are in-built Fast Component wrappers for dcc.Upload and dcc.Slider respectively. The function returns a text field, represented using the html.H1 component by default. from fast_dash import fastdash , UploadImage , Slider @fastdash def your_function ( image : UploadImage , number : Slider ): ... 1.2. Modify default settings These include multiple options like the theme of the app, social media branding links, and subheaders. Title Fast Dash is able to read the title of our callback function and display it at the top of the app. Titles resolve the best if the function name is written in snake case . For example, your_function resolves to Your Function but yourFunction will resolve to YourFunction . For such cases, we can manually specify the title as an argument to @fastdash . @fastdash ( title = \"Your Function\" ) def yourFunction ( ... ): ... Subheader The subheader shows up below the title at the top of the page in an italicized font. Fast Dash also attempts to infer this from the function docstring. But we can also overwrite this in the subheader argument to @fastdash . @fastdash ( title = \"Your Function\" , subheader = \"Coolest Function Ever\" ) # Either here def yourFunction ( ... ): \"Coolest Function Ever\" # or here ... Title image path Fast Dash optionally displays an icon image below the title. The image path can be set with the argument title_image_path . @fastdash ( title_image_path = \"https://tinyurl.com/5fw564ux\" ) def yourFunction ( ... ): ... Social media URLs We can also set social media URLs (Fast Dash supports GitHub, LinkedIn and Twitter URLs so far) in the navigation bar at the top by setting the arguments github_url , linkedin_url , and twitter_url respectively. @fastdash ( github_url = \"github.com/dkedar7\" , linkedin_url = \"linkedin.com/in/dkedar7\" , twitter_url = \"twitter.com/dkedar7\" ) def yourFunction ( ... ): ... Navbar and footer visibility We can hide the navbar and the footer by controlling the boolean navbar and footer arguments respectively. These are set to True by default. @fastdash ( navbar = False , footer = False ) def yourFunction ( ... ): ... Theme The default theme that Fast Dash uses is called JOURNAL but there are more themes that Fast Dash supports. See the full list of supported themes at bootswatch.com . @fastdash ( theme = 'JOURNAL' ) def yourFunction ( ... ): ... Update Live By default, Fast Dash apps load lazily. That means once the user enters inputs, the outputs upadte only after they click Submit . But on setting the update_live argument to True , the Submit and Reset button disappear and the outputs update instantaneously. This feature is also popularly known as hot reloading. @fastdash ( update_live = True ) def yourFunction ( ... ): ... Mode mode is a very interesting argument that decides how Fast Dash apps are deployed. There are currently four supported modes. The default mode is None but the other possible mode options specified below require the jupyter-dash package installed. Read more about the package here . None By default, mode is set to None which deploys the app at the chosen port (default Dash port is 5000). JupyterLab When mode is JupyterLab , the app is deployed within Jupyter environments (e.g. classic Notebook, JupyterLab, Visual Studio Code notebooks, nteract, PyCharm notebooks). The app opens as a separate tab inside JupyterLab. Inline With this mode , Fast Dash uses an IFrame to display the application inline in the notebook. External This behaves like the default mode with the only difference that the app runs outside your Jupyter notebook environment. Fast Dash display a link that where you can navigate to see how the deployment will look to end users after this application is depoyed to production. @fastdash ( mode = 'jupyterlab' ) def yourFunction ( ... ): ... Minimal Sometimes, we just want to see how pur Python functions behaves without worrying about the theme, or the presence of the navbar or footer. If we set minimal to True, Fast Dash only displays the input and output components and hides the rest. @fastdash ( minimal = True ) def yourFunction ( ... ): ... Disable logs Under the hood, setting disable_logs to True disables the messy log output that sometimes follows a successful Fast Dash deployment. This feature is very handy especially when we are deploying apps inside Jupyter enviroments. On the flip side, we lose a lot of useful debugging information. @fastdash ( disable_logs = True ) def yourFunction ( ... ): ... 2. FastDash objects The FastDash class powers all Fast Dash automated app development and deployment. In fact, as mentioned in a note before, all that the @fastdash decorator does under the hood is instantiate a FastDash objects and call the .run() method. In other words, all the discussion and arguments that can be passed to the @fastdash decorator are valid to the FastDash class as well. But unlike the @fastdash decorator, FastDash class gives us access to other Fast Dash internals and flexibility with respect to deploying our apps. Here's how to define and deploy a Fast Dash app using FastDash . Note the highlighted differences in the code. from fast_dash import FastDash def your_function ( ... ): ... app = FastDash ( callback_fn = your_function , ... ) app . run () We are able to logically separate function definition and deployment and additionally can modify configurations beyond what FastDash 's default arguments allow. For example, we are able to bring our own components and layout designs by altering the UI development code which can be accessed using app.app.layout . In the next section , we'll see what Fast Components are, what separates them from other Dash components and how we can easily modify Dash components to make them compatible with Fast Dash.","title":"Under the hood"},{"location":"User%20guide/build/#under-the-hood","text":"Different configurations that go into building a Fast Dash app determine the UI components, themes, how the app is deployed and the nature of user interaction. The intention of this document is to introduce all those options so that you can make the most of Fast Dash.","title":"Under the hood"},{"location":"User%20guide/build/#building-your-fast-dash-app","text":"There are two ways to build a Fast Dash app: Decorating Python functions with the @fastdash decorator from fast_dash import fastdash @fastdash ( ... ) def your_function ( ... ): ... 2. Instantiating an object of the FastDash class from fast_dash import FastDash def your_function ( ... ): ... app = FastDash ( callback_fn = your_function , ... ) app . run () Using the @fastdash decorator is the quickest way to deploy Fast Dash apps but the FastDash class gives us access to the other Fast Dash internals and allows us to tweak them as you see fit. Whereas the fastdash decorator deploys our app at the time of defining our functions, the FastDash class objects are equivalent to Flask's server objects, which allow us to deploy our app later. But we'll understand these difference better throughout the remainder of this document. Note Both the @fastdash decorator and the FastDash class objects are functionally equivalent. The @fastdash decorator is internally powered by the FastDash class. Using decorators saves us the need to specify callback functions as the first argument when defining the FastDash object. Let's first understand how to build Fast Dash apps using the @fastdash decorator and then extend these ideas to the FastDash class.","title":"Building your Fast Dash app"},{"location":"User%20guide/build/#1-fastdash-decorator","text":"","title":"1. @fastdash decorator"},{"location":"User%20guide/build/#whats-a-decorator","text":"In a nutshell, Python decorators are function wrappers that enrich the functionaltiy of Python functions. Here's an in-depth write-up on Python decorators, what they are and how to build them. But all that we need to know for now is that decorators, themselves, are Python functions which take other functions as arguments and add extra functionality to them. The @fastdash decorator is also just a function (read more here about the implementation in the Modules section) that takes the callback function as the first argument and designs a web app around it. But instead of explicitly specifying the name of the callback function as the first argument, we use this syntax instead: @fastdash ( ... ) def your_function ( ... ) ...","title":"What's a decorator?"},{"location":"User%20guide/build/#how-to-use-fastdash","text":"After we have a Python function that runs without errors, there are only two things we need to do:","title":"How to use @fastdash"},{"location":"User%20guide/build/#11-specify-the-input-and-output-type-hints","text":"Fast Dash uses these type hints to determine which components to use. For example, an input with the type hint int will need an input that allows entering integers or a slider. Similarly, an image input will need an upload image or a camera component. What are type hints? First introduced in Python 3.5, type hints are mainly meant to be used IDEs and linters to raise data type mismatch warnings. They not executed during runtime and any errors with type hinting doesn't affect the execution of the function itself. Read more about Python type hints here . def your_function ( a : str , b : int , c : list ) -> str : ... Fast Dash uses this flexbility with defining type hints to allow using Fast Components as hints. More on this in the documentation for Fast Components . So far, Fast Dash understands two types of type hints\u2014one, Python in-built data type classes ( str , int , float , list , dict , etc.), and two, Fast Components . In addition to type hints, the input arguments can also have default values. In the example below, the default values of integer a is Fast , that of b is 5 and c is a list with a default value of [1, 2, 3] . def your_function ( a : str = \"Fast\" , b : int = 5 , c : list = [ 1 , 2 , 3 ]) -> str : ... Fast Dash determines the best Fast Components to use for each input from their hints and default values. Details about which combination of these values result into what components are in the patterns documentation . Fast Components are also valid type hints for Fast Dash. Instead of depending on the hints and default values, using Fast Components is a direct way of telling Fast Dash which components to use. In the example below, UploadImage and Slider are in-built Fast Component wrappers for dcc.Upload and dcc.Slider respectively. The function returns a text field, represented using the html.H1 component by default. from fast_dash import fastdash , UploadImage , Slider @fastdash def your_function ( image : UploadImage , number : Slider ): ...","title":"1.1. Specify the input and output type hints"},{"location":"User%20guide/build/#12-modify-default-settings","text":"These include multiple options like the theme of the app, social media branding links, and subheaders.","title":"1.2. Modify default settings"},{"location":"User%20guide/build/#title","text":"Fast Dash is able to read the title of our callback function and display it at the top of the app. Titles resolve the best if the function name is written in snake case . For example, your_function resolves to Your Function but yourFunction will resolve to YourFunction . For such cases, we can manually specify the title as an argument to @fastdash . @fastdash ( title = \"Your Function\" ) def yourFunction ( ... ): ...","title":"Title"},{"location":"User%20guide/build/#subheader","text":"The subheader shows up below the title at the top of the page in an italicized font. Fast Dash also attempts to infer this from the function docstring. But we can also overwrite this in the subheader argument to @fastdash . @fastdash ( title = \"Your Function\" , subheader = \"Coolest Function Ever\" ) # Either here def yourFunction ( ... ): \"Coolest Function Ever\" # or here ...","title":"Subheader"},{"location":"User%20guide/build/#title-image-path","text":"Fast Dash optionally displays an icon image below the title. The image path can be set with the argument title_image_path . @fastdash ( title_image_path = \"https://tinyurl.com/5fw564ux\" ) def yourFunction ( ... ): ...","title":"Title image path"},{"location":"User%20guide/build/#social-media-urls","text":"We can also set social media URLs (Fast Dash supports GitHub, LinkedIn and Twitter URLs so far) in the navigation bar at the top by setting the arguments github_url , linkedin_url , and twitter_url respectively. @fastdash ( github_url = \"github.com/dkedar7\" , linkedin_url = \"linkedin.com/in/dkedar7\" , twitter_url = \"twitter.com/dkedar7\" ) def yourFunction ( ... ): ...","title":"Social media URLs"},{"location":"User%20guide/build/#navbar-and-footer-visibility","text":"We can hide the navbar and the footer by controlling the boolean navbar and footer arguments respectively. These are set to True by default. @fastdash ( navbar = False , footer = False ) def yourFunction ( ... ): ...","title":"Navbar and footer visibility"},{"location":"User%20guide/build/#theme","text":"The default theme that Fast Dash uses is called JOURNAL but there are more themes that Fast Dash supports. See the full list of supported themes at bootswatch.com . @fastdash ( theme = 'JOURNAL' ) def yourFunction ( ... ): ...","title":"Theme"},{"location":"User%20guide/build/#update-live","text":"By default, Fast Dash apps load lazily. That means once the user enters inputs, the outputs upadte only after they click Submit . But on setting the update_live argument to True , the Submit and Reset button disappear and the outputs update instantaneously. This feature is also popularly known as hot reloading. @fastdash ( update_live = True ) def yourFunction ( ... ): ...","title":"Update Live"},{"location":"User%20guide/build/#mode","text":"mode is a very interesting argument that decides how Fast Dash apps are deployed. There are currently four supported modes. The default mode is None but the other possible mode options specified below require the jupyter-dash package installed. Read more about the package here .","title":"Mode"},{"location":"User%20guide/build/#none","text":"By default, mode is set to None which deploys the app at the chosen port (default Dash port is 5000).","title":"None"},{"location":"User%20guide/build/#jupyterlab","text":"When mode is JupyterLab , the app is deployed within Jupyter environments (e.g. classic Notebook, JupyterLab, Visual Studio Code notebooks, nteract, PyCharm notebooks). The app opens as a separate tab inside JupyterLab.","title":"JupyterLab"},{"location":"User%20guide/build/#inline","text":"With this mode , Fast Dash uses an IFrame to display the application inline in the notebook.","title":"Inline"},{"location":"User%20guide/build/#external","text":"This behaves like the default mode with the only difference that the app runs outside your Jupyter notebook environment. Fast Dash display a link that where you can navigate to see how the deployment will look to end users after this application is depoyed to production. @fastdash ( mode = 'jupyterlab' ) def yourFunction ( ... ): ...","title":"External"},{"location":"User%20guide/build/#minimal","text":"Sometimes, we just want to see how pur Python functions behaves without worrying about the theme, or the presence of the navbar or footer. If we set minimal to True, Fast Dash only displays the input and output components and hides the rest. @fastdash ( minimal = True ) def yourFunction ( ... ): ...","title":"Minimal"},{"location":"User%20guide/build/#disable-logs","text":"Under the hood, setting disable_logs to True disables the messy log output that sometimes follows a successful Fast Dash deployment. This feature is very handy especially when we are deploying apps inside Jupyter enviroments. On the flip side, we lose a lot of useful debugging information. @fastdash ( disable_logs = True ) def yourFunction ( ... ): ...","title":"Disable logs"},{"location":"User%20guide/build/#2-fastdash-objects","text":"The FastDash class powers all Fast Dash automated app development and deployment. In fact, as mentioned in a note before, all that the @fastdash decorator does under the hood is instantiate a FastDash objects and call the .run() method. In other words, all the discussion and arguments that can be passed to the @fastdash decorator are valid to the FastDash class as well. But unlike the @fastdash decorator, FastDash class gives us access to other Fast Dash internals and flexibility with respect to deploying our apps. Here's how to define and deploy a Fast Dash app using FastDash . Note the highlighted differences in the code. from fast_dash import FastDash def your_function ( ... ): ... app = FastDash ( callback_fn = your_function , ... ) app . run () We are able to logically separate function definition and deployment and additionally can modify configurations beyond what FastDash 's default arguments allow. For example, we are able to bring our own components and layout designs by altering the UI development code which can be accessed using app.app.layout . In the next section , we'll see what Fast Components are, what separates them from other Dash components and how we can easily modify Dash components to make them compatible with Fast Dash.","title":"2. FastDash objects"},{"location":"User%20guide/components/","text":"Fast Components Fast components are the UI components that represent the input and outputs elements in a Fast Dash app. In fact, they are Dash components modified by adding a new component_property attribute, in addition to a few other optional properties. Fast Dash provides a Fastify function to transform Dash components into Fast components. Fast Dash borrows the concept of component_property from Dash. component_property is the answer to the question - \"Which property of a component should be assigned the value returned by the callback function?\" For example, if the first argument of a Fast Dash callback function is a str and we want to represent this input using a component that allows users to enter text. Say we decide to use the dbc.Input() Dash component. By reading the documentation of the component here , you'll realize that we must update the value property of dbc.Input() for it work as expected. And therefore, when defining a Fast component for this input we'd use component_property=\"value\" . We use this design and the fact that Fast Dash allows using Fast components as type hints, in addition of standard Python data types, to write a simple app that takes text entered by users as the first input. from fast_dash import Fastify , dbc text_input_component = Fastify ( component = dbc . Input (), component_property = \"value\" ) @fastdash def your_function ( input_text : text_input_component , ... ): ... Note Note that Fast Dash offers prebuilt Fast Components for common use cases. Some of them are - Text : To allow entering input text - Slider : For integer inputs - Upload : Used to upload documents - UploadImage : Special case of Upload used to upload images - Image : Used to display image variables returned by callback functions. - Graph : Display Plotly graphs These can be easily imported into your script like this: from fast_dash import Text , Slider , Upload , UploadImage , Image , Graph Dash components vs Fast components If you have used Dash, you will know that we have to specify a component_property to Dash's Input and Output methods when defining our callback functions (during runtime). In other words, you can develop Dash UI before writing your callback functions. On the contrary, Fast Dash infers components (when not specified) by studying the underlying callback function, particularly its type hints and default values. For that reason, it becomes essential for us to specify the component_property before we define our callback function. How are they different from Dash components How to transform Dash components into Fast components The special acknowledgement (ack) components Some examples","title":"Fast Components"},{"location":"User%20guide/components/#fast-components","text":"Fast components are the UI components that represent the input and outputs elements in a Fast Dash app. In fact, they are Dash components modified by adding a new component_property attribute, in addition to a few other optional properties. Fast Dash provides a Fastify function to transform Dash components into Fast components. Fast Dash borrows the concept of component_property from Dash. component_property is the answer to the question - \"Which property of a component should be assigned the value returned by the callback function?\" For example, if the first argument of a Fast Dash callback function is a str and we want to represent this input using a component that allows users to enter text. Say we decide to use the dbc.Input() Dash component. By reading the documentation of the component here , you'll realize that we must update the value property of dbc.Input() for it work as expected. And therefore, when defining a Fast component for this input we'd use component_property=\"value\" . We use this design and the fact that Fast Dash allows using Fast components as type hints, in addition of standard Python data types, to write a simple app that takes text entered by users as the first input. from fast_dash import Fastify , dbc text_input_component = Fastify ( component = dbc . Input (), component_property = \"value\" ) @fastdash def your_function ( input_text : text_input_component , ... ): ... Note Note that Fast Dash offers prebuilt Fast Components for common use cases. Some of them are - Text : To allow entering input text - Slider : For integer inputs - Upload : Used to upload documents - UploadImage : Special case of Upload used to upload images - Image : Used to display image variables returned by callback functions. - Graph : Display Plotly graphs These can be easily imported into your script like this: from fast_dash import Text , Slider , Upload , UploadImage , Image , Graph Dash components vs Fast components If you have used Dash, you will know that we have to specify a component_property to Dash's Input and Output methods when defining our callback functions (during runtime). In other words, you can develop Dash UI before writing your callback functions. On the contrary, Fast Dash infers components (when not specified) by studying the underlying callback function, particularly its type hints and default values. For that reason, it becomes essential for us to specify the component_property before we define our callback function.","title":"Fast Components"},{"location":"User%20guide/components/#how-are-they-different-from-dash-components","text":"","title":"How are they different from Dash components"},{"location":"User%20guide/components/#how-to-transform-dash-components-into-fast-components","text":"","title":"How to transform Dash components into Fast components"},{"location":"User%20guide/components/#the-special-acknowledgement-ack-components","text":"","title":"The special acknowledgement (ack) components"},{"location":"User%20guide/components/#some-examples","text":"","title":"Some examples"},{"location":"User%20guide/deployment/","text":"Deployment Fast Dash apps can be deployed as regular Dash apps. A universal and hence the preferred method to deploy is to containers the applications and then deploy to a public cloud endpoint. Here're the general steps involved with the deployment process: Add a Dockerfile in the same directory that contains the main Fast Dash app module. Create wsgi.py Python script in the same path. Build and run Docker container. The recommended directory structure is this: root\\ - app.py - requirements.txt - ....py # (Other scripts that your Fast Dash app needs) With these steps in mind, let's see how we can deploy our simple text-to-text Fast Dash app to the most used cloud services. 1. Google Cloud Run Step 1. Get started with Google Cloud Get started with Google Cloud here . If you already have an account, proceed to the console and select Cloud Run from the list of services. Although not mandatory, it's highly recommended to get access to the gcloud command line utility . The gcloud CLI reduces the deployment down to just a single line of code. Step 2. Add wsgi.py Add wsgi.py Python script to the current directory. Modify it and add the following lines: from app import app server = app . app . server server is the Flask object that gets deployed. We need to isolate it from the rest of the app code so that we can instruct gunicorn in the next step to deploy it inside our Docker container. Step 3. Create Dockerfile Create a new file in the current path and modify it to reflect the following: FROM python:3.9-slim # Copy local code to the container image. ADD . /app WORKDIR /app # Install production dependencies. RUN pip3 install --no-cache-dir -r requirements.txt # Deploy app using gunicorn CMD exec gunicorn wsgi:server --bind :$PORT Step 4. Modify requirements.txt Add gunicorn to the list of dependencies in requirements.txt . At this stage, the root path of your app should have this structure: root\\ - app.py - requirements.txt - wsgi.py - Dockerfile - ....py # (Other scripts that your Fast Dash app needs) Step 5. Deploy! \ud83d\ude80 If the gcloud CLI was correctly installed in step 1, simply run this command from the root of your project directory: gcloud run deploy You will be asked to enter a few different settings for your app. Read Google Cloud Run's documentation here to understand what each of them mean. Generally, choosing the following settings is acceptable: Source code location: Enter the directory with Dockerfile . If you are already in the project root , then this directory is preselected. Simply hit Enter . Service name: Type the app name of hit Enter to select default. Please specify a region: Choose the number corresponding to your nearest region. Allow unauthenticated invocations to: Select y if you understand and are okay with the repercussions. That's it! Google Cloud will build your app inside a Docker container and display the URL here once it's ready. The entire operation can take upto 5 minutes for simple applications. The build time highly depends on the complexity of your app and the number of dependencies.","title":"Deployment"},{"location":"User%20guide/deployment/#deployment","text":"Fast Dash apps can be deployed as regular Dash apps. A universal and hence the preferred method to deploy is to containers the applications and then deploy to a public cloud endpoint. Here're the general steps involved with the deployment process: Add a Dockerfile in the same directory that contains the main Fast Dash app module. Create wsgi.py Python script in the same path. Build and run Docker container. The recommended directory structure is this: root\\ - app.py - requirements.txt - ....py # (Other scripts that your Fast Dash app needs) With these steps in mind, let's see how we can deploy our simple text-to-text Fast Dash app to the most used cloud services.","title":"Deployment"},{"location":"User%20guide/deployment/#1-google-cloud-run","text":"","title":"1. Google Cloud Run"},{"location":"User%20guide/deployment/#step-1-get-started-with-google-cloud","text":"Get started with Google Cloud here . If you already have an account, proceed to the console and select Cloud Run from the list of services. Although not mandatory, it's highly recommended to get access to the gcloud command line utility . The gcloud CLI reduces the deployment down to just a single line of code.","title":"Step 1. Get started with Google Cloud"},{"location":"User%20guide/deployment/#step-2-add-wsgipy","text":"Add wsgi.py Python script to the current directory. Modify it and add the following lines: from app import app server = app . app . server server is the Flask object that gets deployed. We need to isolate it from the rest of the app code so that we can instruct gunicorn in the next step to deploy it inside our Docker container.","title":"Step 2. Add wsgi.py"},{"location":"User%20guide/deployment/#step-3-create-dockerfile","text":"Create a new file in the current path and modify it to reflect the following: FROM python:3.9-slim # Copy local code to the container image. ADD . /app WORKDIR /app # Install production dependencies. RUN pip3 install --no-cache-dir -r requirements.txt # Deploy app using gunicorn CMD exec gunicorn wsgi:server --bind :$PORT","title":"Step 3. Create Dockerfile"},{"location":"User%20guide/deployment/#step-4-modify-requirementstxt","text":"Add gunicorn to the list of dependencies in requirements.txt . At this stage, the root path of your app should have this structure: root\\ - app.py - requirements.txt - wsgi.py - Dockerfile - ....py # (Other scripts that your Fast Dash app needs)","title":"Step 4. Modify requirements.txt"},{"location":"User%20guide/deployment/#step-5-deploy","text":"If the gcloud CLI was correctly installed in step 1, simply run this command from the root of your project directory: gcloud run deploy You will be asked to enter a few different settings for your app. Read Google Cloud Run's documentation here to understand what each of them mean. Generally, choosing the following settings is acceptable: Source code location: Enter the directory with Dockerfile . If you are already in the project root , then this directory is preselected. Simply hit Enter . Service name: Type the app name of hit Enter to select default. Please specify a region: Choose the number corresponding to your nearest region. Allow unauthenticated invocations to: Select y if you understand and are okay with the repercussions. That's it! Google Cloud will build your app inside a Docker container and display the URL here once it's ready. The entire operation can take upto 5 minutes for simple applications. The build time highly depends on the complexity of your app and the number of dependencies.","title":"Step 5. Deploy! \ud83d\ude80"},{"location":"User%20guide/patterns/","text":"Coming soon ...","title":"Common patterns"}]}