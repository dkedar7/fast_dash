{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Open source, Python-based tool to build prototypes lightning fast \u26a1 </p> <p> </p> <ul> <li>Documentation: https://docs.fastdash.app</li> <li>Source code: github.com/dkedar7/fast_dash</li> <li>Installation: <code>pip install fast-dash</code></li> </ul> <p>Fast Dash is a Python module that makes the development of web applications fast and easy. It can build web interfaces for Machine Learning models or to showcase any proof of concept without the hassle of developing UI from scratch.</p>"},{"location":"#examples","title":"Examples","text":"<p>With Fast Dash's decorator <code>@fastdash</code>, it's a breeze to deploy any Python function as a web app. Here's how to use it to write your first Fast Dash app: <pre><code>from fast_dash import fastdash\n\n@fastdash\ndef text_to_text_function(input_text):\n    return input_text\n\n# * Running on http://127.0.0.1:8080/ (Press CTRL+C to quit)\n</code></pre></p> <p>And just like that (\ud83e\ude84), we have a completely functional interactive app!</p> <p>Output: </p> <p>Fast Dash can read all the function details, like its name, input and output types, docstring, and uses this information to infer which components to use.</p> <p>For example, here's how to deploy an app that takes a string and an integer as inputs and returns some text.</p> <pre><code>from fast_dash import fastdash\n\n@fastdash\ndef display_selected_text_and_number(text: str, number: int) -&gt; str:\n    \"Simply display the selected text and number\"\n\n    processed_text = f'Selected text is {text} and the number is {number}.'\n\n    return processed_text\n\n# * Running on http://127.0.0.1:8080/ (Press CTRL+C to quit)\n</code></pre> <p>Output: </p> <p>And with just a few more lines, we can add a title icon, subheader and other social branding details.</p> <p>Output components can be arranged using a mosaic layout (ASCII art), inspired from Matplotlib's <code>subplot_mosaic</code> feature.</p> <p><pre><code>from fast_dash import fastdash, UploadImage, Graph\nimport matplotlib.pyplot as plt\n\nmosaic = \"\"\"\nAB\nAC\n\"\"\"\n\n@fastdash(mosaic=mosaic, theme=\"BOOTSTRAP\")\ndef multiple_output_components(start_date: datetime.date, # Adds a date component\n                            upload_image: UploadImage, # Adds an upload component\n                            fips: str = [List of FIPs]) # Adds a single select dropdown\n                            -&gt; (Graph, plt.Figure, plt.Figure): \n                            # Output components are a Plotly graph, and two figure components\n\n    \"Fast Dash allows using mosaic arrays to arrange output components\"\n\n    choropleth_map = ...\n    histogram = ...\n    radar_chart = ...\n\n    return chloropleth_map, histogram, radar_chart\n\n# * Running on http://127.0.0.1:8080/ (Press CTRL+C to quit)\n</code></pre> </p>"},{"location":"#about","title":"About","text":"<p>Read different ways to build Fast Dash apps and additional details by navigating to the project documentation.</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Deploy an app just by adding a decorator</li> <li>Components are inferred from function type hints. Allows using Dash components as type hints.</li> <li>Use multiple input and output components simultaneously</li> <li>Build fast, share and iterate</li> </ul>"},{"location":"#community","title":"Community","text":"<p>Fast Dash is built using Plotly Dash and it's completely open-source.</p>"},{"location":"#citation","title":"Citation","text":"<p>Please cite Fast Dash it if you use it in your work. <pre><code>@software{Kedar_Dabhadkar_Fast_Dash,\nauthor = {Kedar Dabhadkar},\ntitle = {{Fast Dash}}\n}\n</code></pre></p>"},{"location":"api/","title":"Modules","text":"<p>Top-level package for Fast Dash.</p>"},{"location":"api/#fast_dash.FastDash","title":"<code>FastDash</code>","text":"<p>Fast Dash app object containing automatically generated UI components and callbacks.</p> <p>This is the primary Fast Dash data structure. Can be thought of as a wrapper around a flask WSGI application. It has in-built support for automated UI generation and sets all parameters required for Fast Dash app deployment.</p> Source code in <code>fast_dash/fast_dash.py</code> <pre><code>class FastDash:\n\"\"\"\n    Fast Dash app object containing automatically generated UI components and callbacks.\n\n    This is the primary Fast Dash data structure. Can be thought of as a wrapper around\n    a flask WSGI application. It has in-built support for automated UI generation and\n    sets all parameters required for Fast Dash app deployment.\n    \"\"\"\n\n    def __init__(\n        self,\n        callback_fn,\n        layout=\"sidebar\",\n        mosaic=None,\n        inputs=None,\n        outputs=None,\n        output_labels=\"infer\",\n        title=None,\n        title_image_path=None,\n        subheader=None,\n        github_url=None,\n        linkedin_url=None,\n        twitter_url=None,\n        navbar=True,\n        footer=True,\n        theme=None,\n        update_live=False,\n        port=8080,\n        mode=None,\n        minimal=False,\n        disable_logs=False,\n        scale_height=1,\n        run_kwargs=dict(),\n        **kwargs\n    ):\n\"\"\"\n        Args:\n            callback_fn (func): Python function that Fast Dash deploys.\n                This function guides the behavior of and interaction between input and output components.\n\n            layout (str, optional): App layout style. Currently supports 'base' and 'sidebar' (default).\n\n            mosaic (str): Mosaic array layout, if sidebar layout is selected.\n\n            inputs (Fast component, list of Fast components, optional): Components to represent inputs of the callback function.\n                Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type\n                hints and default values. In the absence of type hints, default components are all `Text`.\n\n            outputs (Fast component, list of Fast components, optional): Components to represent outputs of the callback function.\n                Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints.\n                In the absence of type hints, default components are all `Text`.\n\n            output_labels(list of string labels or \"infer\" or None, optional): Labels given to the output components. If None, inputs are\n                set labeled integers starting at 1 (Output 1, Output 2, and so on). If \"infer\", labels are inferred from the function\n                signature.\n\n            title (str, optional): Title given to the app. Defaults to None. If `None`, function name (assumed to be in snake case)\n                is converted to title case.\n\n            title_image_path (str, optional): Path (local or URL) of the app title image. Defaults to None.\n\n            subheader (str, optional): Subheader of the app, displayed below the title image and title. Defaults to None.\n                If `None`, Fast Dash tries to use the callback function's docstring instead.\n\n            github_url (str, optional): GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the\n                specified URL. Defaults to None.\n\n            linkedin_url (str, optional): LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the\n                specified URL. Defaults to None.\n\n            twitter_url (str, optional): Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the\n                specified URL. Defaults to None.\n\n            navbar (bool, optional): Display navbar. Defaults to True.\n\n            footer (bool, optional): Display footer. Defaults to True.\n\n            theme (str, optional): Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found\n                at https://bootswatch.com/.\n\n            update_live (bool, optional): Enable hot reloading. Defaults to False.\n\n            port (int, optional): Port to which the app should be deployed. Defauts to 8080.\n\n            mode (str, optional): Mode in which to launch the app. Acceptable options are `None`, `jupyterlab`, `inline`, 'external`.\n                Defaults to None.\n\n            minimal (bool, optional): Display minimal version by hiding navbar, title, title image, subheader and footer.\n                Defaults to False.\n\n            disable_logs (bool, optional): Hide app logs. Sets logger level to `ERROR`. Defaults to False.\n\n            scale_height (float, optional): Height of the app container is enlarged as a multiple of this. Defaults to 1.\n\n            run_kwargs (dict, optional): All values from this variable are passed to Dash's `.run` method.\n        \"\"\"\n\n        self.callback_fn = callback_fn\n        self.layout_pattern = layout\n        self.mosaic = mosaic\n        self.output_labels = output_labels\n\n        if output_labels == \"infer\":\n            self.output_labels = _infer_variable_names(callback_fn)\n\n        self.inputs = _infer_input_components(callback_fn) if inputs is None else inputs\n        self.outputs = _infer_output_components(callback_fn, outputs, self.output_labels)\n        self.update_live = update_live\n        self.mode = mode\n        self.disable_logs = disable_logs\n        self.scale_height = scale_height\n        self.port = port\n        self.run_kwargs = run_kwargs\n        self.run_kwargs.update(dict(port=port))\n        self.kwargs = kwargs\n\n        if self.disable_logs is True:\n            log = logging.getLogger(\"werkzeug\")\n            log.setLevel(logging.ERROR)\n\n        else:\n            log = logging.getLogger(\"werkzeug\")\n            log.setLevel(logging.DEBUG)\n\n        if title is None:\n            title = re.sub(\"[^0-9a-zA-Z]+\", \" \", callback_fn.__name__).title()\n\n        self.title = title\n        self.title_image_path = title_image_path\n        self.subtitle = subheader if subheader is not None else callback_fn.__doc__\n        self.github_url = github_url\n        self.linkedin_url = linkedin_url\n        self.twitter_url = twitter_url\n        self.navbar = navbar\n        self.footer = footer\n        self.theme = theme or \"JOURNAL\"\n        self.minimal = minimal\n\n        # Assign IDs to components\n        self.inputs_with_ids = _assign_ids_to_inputs(self.inputs, self.callback_fn)\n        self.outputs_with_ids = _assign_ids_to_outputs(self.outputs)\n        self.ack_mask = [\n            False if (not hasattr(input_, \"ack\") or (input_.ack is None)) else True\n            for input_ in self.inputs_with_ids\n        ]\n\n        # Default state of outputs\n        self.output_state_default = [\n            output_.placeholder if hasattr(output_, \"placeholder\") else None\n            for output_ in self.outputs_with_ids\n        ]\n\n        # Define Flask server\n        server = flask.Flask(__name__)\n        external_stylesheets = [\n            theme_mapper(self.theme),\n            \"https://use.fontawesome.com/releases/v5.9.0/css/all.css\",\n        ]\n\n        source = dash.Dash\n        if self.mode is not None:\n            try:\n                from jupyter_dash import JupyterDash\n\n                source = JupyterDash\n\n            except ImportError as e:\n                self.mode = None\n                warnings.warn(str(e))\n                warnings.warn(\"Ignoring mode argument\")\n\n        self.app = source(\n            __name__,\n            external_stylesheets=external_stylesheets,\n            server=server,\n            **self.kwargs\n        )\n        # Define app title\n        self.app.title = self.title or \"\"\n\n        # Intialize layout\n        self.set_layout()\n\n        # Register callbacks\n        self.register_callback_fn()\n\n        # Keep track of the number of clicks\n        self.submit_clicks = 0\n        self.reset_clicks = 0\n        self.app_initialized = False\n\n        # Allow easier access to Dash server\n        self.server = self.app.server\n\n    def run(self):\n        self.server.run(\n            **self.run_kwargs\n        ) if self.mode is None else self.app.run_server(\n            mode=self.mode, **self.run_kwargs\n        )\n\n    def run_server(self):\n        self.app.run_server(\n            **self.run_kwargs\n        ) if self.mode is None else self.app.run_server(\n            mode=self.mode, **self.run_kwargs\n        )\n\n    def set_layout(self):\n        if self.inputs is not None:\n            input_groups = _make_input_groups(self.inputs_with_ids, self.update_live)\n\n        if self.outputs is not None:\n            output_groups = _make_output_groups(self.outputs_with_ids, self.update_live)\n\n        layout_args = {\n            \"mosaic\": self.mosaic,\n            \"inputs\": input_groups,\n            \"outputs\": output_groups,\n            \"title\": self.title,\n            \"title_image_path\": self.title_image_path,\n            \"subtitle\": self.subtitle,\n            \"github_url\": self.github_url,\n            \"linkedin_url\": self.linkedin_url,\n            \"twitter_url\": self.twitter_url,\n            \"navbar\": self.navbar,\n            \"footer\": self.footer,\n            \"minimal\": self.minimal,\n            \"scale_height\": self.scale_height,\n            \"app\": self\n        }\n\n        if self.layout_pattern == \"sidebar\":\n            app_layout = SidebarLayout(**layout_args)\n\n        else:\n            app_layout = BaseLayout(**layout_args)\n\n        self.layout_object = app_layout\n        self.app.layout = app_layout.generate_layout()\n\n    def register_callback_fn(self):\n        @self.app.callback(\n            [\n                Output(\n                    component_id=output_.id,\n                    component_property=output_.component_property,\n                )\n                for output_ in self.outputs_with_ids\n            ]\n            + [\n                Output(\n                    component_id=input_.ack.id,\n                    component_property=input_.ack.component_property,\n                )\n                for input_ in self.inputs_with_ids\n            ],\n            [\n                Input(\n                    component_id=input_.id, component_property=input_.component_property\n                )\n                for input_ in self.inputs_with_ids\n            ]\n            + [\n                Input(component_id=\"reset_inputs\", component_property=\"n_clicks\"),\n                Input(component_id=\"submit_inputs\", component_property=\"n_clicks\"),\n            ],\n            prevent_initial_callback=True,\n        )\n        def process_input(*args):\n            # if ctx.triggered_id not in [\"submit_inputs\", \"reset_inputs\"]:\n            #     raise PreventUpdate\n\n            ack_components = [\n                ack if mask is True else None\n                for mask, ack in zip(self.ack_mask, list(args[:-2]))\n            ]\n\n            if ctx.triggered_id == \"submit_inputs\" or (\n                self.update_live is True and None not in args\n            ):\n                self.app_initialized = True\n                output_state = self.callback_fn(*args[:-2])\n\n                if isinstance(output_state, tuple):\n                    self.output_state = list(output_state)\n\n                else:\n                    self.output_state = [output_state]\n\n                # Transform outputs to fit in the desired components\n                self.output_state = _transform_outputs(self.output_state)\n\n                return self.output_state + ack_components\n\n            elif ctx.triggered_id == \"reset_inputs\":\n                self.output_state = self.output_state_default\n                return self.output_state + ack_components\n\n            elif self.app_initialized:\n                return self.output_state + ack_components\n\n            else:\n                return self.output_state_default + ack_components\n\n        # Set layout callbacks\n        if not self.minimal:\n            self.layout_object.callbacks(self.app)\n</code></pre>"},{"location":"api/#fast_dash.fast_dash.FastDash.__init__","title":"<code>__init__(callback_fn, layout='sidebar', mosaic=None, inputs=None, outputs=None, output_labels='infer', title=None, title_image_path=None, subheader=None, github_url=None, linkedin_url=None, twitter_url=None, navbar=True, footer=True, theme=None, update_live=False, port=8080, mode=None, minimal=False, disable_logs=False, scale_height=1, run_kwargs=dict(), kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>callback_fn</code> <code>func</code> <p>Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components.</p> required <code>layout</code> <code>str</code> <p>App layout style. Currently supports 'base' and 'sidebar' (default).</p> <code>'sidebar'</code> <code>mosaic</code> <code>str</code> <p>Mosaic array layout, if sidebar layout is selected.</p> <code>None</code> <code>inputs</code> <code>Fast component, list of Fast components</code> <p>Components to represent inputs of the callback function. Defaults to None. If <code>None</code>, Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all <code>Text</code>.</p> <code>None</code> <code>outputs</code> <code>Fast component, list of Fast components</code> <p>Components to represent outputs of the callback function. Defaults to None. If <code>None</code>, Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all <code>Text</code>.</p> <code>None</code> <code>output_labels(list</code> <code>of string labels or \"infer\" or None</code> <p>Labels given to the output components. If None, inputs are set labeled integers starting at 1 (Output 1, Output 2, and so on). If \"infer\", labels are inferred from the function signature.</p> required <code>title</code> <code>str</code> <p>Title given to the app. Defaults to None. If <code>None</code>, function name (assumed to be in snake case) is converted to title case.</p> <code>None</code> <code>title_image_path</code> <code>str</code> <p>Path (local or URL) of the app title image. Defaults to None.</p> <code>None</code> <code>subheader</code> <code>str</code> <p>Subheader of the app, displayed below the title image and title. Defaults to None. If <code>None</code>, Fast Dash tries to use the callback function's docstring instead.</p> <code>None</code> <code>github_url</code> <code>str</code> <p>GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None.</p> <code>None</code> <code>linkedin_url</code> <code>str</code> <p>LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None.</p> <code>None</code> <code>twitter_url</code> <code>str</code> <p>Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None.</p> <code>None</code> <code>navbar</code> <code>bool</code> <p>Display navbar. Defaults to True.</p> <code>True</code> <code>footer</code> <code>bool</code> <p>Display footer. Defaults to True.</p> <code>True</code> <code>theme</code> <code>str</code> <p>Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/.</p> <code>None</code> <code>update_live</code> <code>bool</code> <p>Enable hot reloading. Defaults to False.</p> <code>False</code> <code>port</code> <code>int</code> <p>Port to which the app should be deployed. Defauts to 8080.</p> <code>8080</code> <code>mode</code> <code>str</code> <p>Mode in which to launch the app. Acceptable options are <code>None</code>, <code>jupyterlab</code>, <code>inline</code>, 'external`. Defaults to None.</p> <code>None</code> <code>minimal</code> <code>bool</code> <p>Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False.</p> <code>False</code> <code>disable_logs</code> <code>bool</code> <p>Hide app logs. Sets logger level to <code>ERROR</code>. Defaults to False.</p> <code>False</code> <code>scale_height</code> <code>float</code> <p>Height of the app container is enlarged as a multiple of this. Defaults to 1.</p> <code>1</code> <code>run_kwargs</code> <code>dict</code> <p>All values from this variable are passed to Dash's <code>.run</code> method.</p> <code>dict()</code> Source code in <code>fast_dash/fast_dash.py</code> <pre><code>def __init__(\n    self,\n    callback_fn,\n    layout=\"sidebar\",\n    mosaic=None,\n    inputs=None,\n    outputs=None,\n    output_labels=\"infer\",\n    title=None,\n    title_image_path=None,\n    subheader=None,\n    github_url=None,\n    linkedin_url=None,\n    twitter_url=None,\n    navbar=True,\n    footer=True,\n    theme=None,\n    update_live=False,\n    port=8080,\n    mode=None,\n    minimal=False,\n    disable_logs=False,\n    scale_height=1,\n    run_kwargs=dict(),\n    **kwargs\n):\n\"\"\"\n    Args:\n        callback_fn (func): Python function that Fast Dash deploys.\n            This function guides the behavior of and interaction between input and output components.\n\n        layout (str, optional): App layout style. Currently supports 'base' and 'sidebar' (default).\n\n        mosaic (str): Mosaic array layout, if sidebar layout is selected.\n\n        inputs (Fast component, list of Fast components, optional): Components to represent inputs of the callback function.\n            Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type\n            hints and default values. In the absence of type hints, default components are all `Text`.\n\n        outputs (Fast component, list of Fast components, optional): Components to represent outputs of the callback function.\n            Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints.\n            In the absence of type hints, default components are all `Text`.\n\n        output_labels(list of string labels or \"infer\" or None, optional): Labels given to the output components. If None, inputs are\n            set labeled integers starting at 1 (Output 1, Output 2, and so on). If \"infer\", labels are inferred from the function\n            signature.\n\n        title (str, optional): Title given to the app. Defaults to None. If `None`, function name (assumed to be in snake case)\n            is converted to title case.\n\n        title_image_path (str, optional): Path (local or URL) of the app title image. Defaults to None.\n\n        subheader (str, optional): Subheader of the app, displayed below the title image and title. Defaults to None.\n            If `None`, Fast Dash tries to use the callback function's docstring instead.\n\n        github_url (str, optional): GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the\n            specified URL. Defaults to None.\n\n        linkedin_url (str, optional): LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the\n            specified URL. Defaults to None.\n\n        twitter_url (str, optional): Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the\n            specified URL. Defaults to None.\n\n        navbar (bool, optional): Display navbar. Defaults to True.\n\n        footer (bool, optional): Display footer. Defaults to True.\n\n        theme (str, optional): Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found\n            at https://bootswatch.com/.\n\n        update_live (bool, optional): Enable hot reloading. Defaults to False.\n\n        port (int, optional): Port to which the app should be deployed. Defauts to 8080.\n\n        mode (str, optional): Mode in which to launch the app. Acceptable options are `None`, `jupyterlab`, `inline`, 'external`.\n            Defaults to None.\n\n        minimal (bool, optional): Display minimal version by hiding navbar, title, title image, subheader and footer.\n            Defaults to False.\n\n        disable_logs (bool, optional): Hide app logs. Sets logger level to `ERROR`. Defaults to False.\n\n        scale_height (float, optional): Height of the app container is enlarged as a multiple of this. Defaults to 1.\n\n        run_kwargs (dict, optional): All values from this variable are passed to Dash's `.run` method.\n    \"\"\"\n\n    self.callback_fn = callback_fn\n    self.layout_pattern = layout\n    self.mosaic = mosaic\n    self.output_labels = output_labels\n\n    if output_labels == \"infer\":\n        self.output_labels = _infer_variable_names(callback_fn)\n\n    self.inputs = _infer_input_components(callback_fn) if inputs is None else inputs\n    self.outputs = _infer_output_components(callback_fn, outputs, self.output_labels)\n    self.update_live = update_live\n    self.mode = mode\n    self.disable_logs = disable_logs\n    self.scale_height = scale_height\n    self.port = port\n    self.run_kwargs = run_kwargs\n    self.run_kwargs.update(dict(port=port))\n    self.kwargs = kwargs\n\n    if self.disable_logs is True:\n        log = logging.getLogger(\"werkzeug\")\n        log.setLevel(logging.ERROR)\n\n    else:\n        log = logging.getLogger(\"werkzeug\")\n        log.setLevel(logging.DEBUG)\n\n    if title is None:\n        title = re.sub(\"[^0-9a-zA-Z]+\", \" \", callback_fn.__name__).title()\n\n    self.title = title\n    self.title_image_path = title_image_path\n    self.subtitle = subheader if subheader is not None else callback_fn.__doc__\n    self.github_url = github_url\n    self.linkedin_url = linkedin_url\n    self.twitter_url = twitter_url\n    self.navbar = navbar\n    self.footer = footer\n    self.theme = theme or \"JOURNAL\"\n    self.minimal = minimal\n\n    # Assign IDs to components\n    self.inputs_with_ids = _assign_ids_to_inputs(self.inputs, self.callback_fn)\n    self.outputs_with_ids = _assign_ids_to_outputs(self.outputs)\n    self.ack_mask = [\n        False if (not hasattr(input_, \"ack\") or (input_.ack is None)) else True\n        for input_ in self.inputs_with_ids\n    ]\n\n    # Default state of outputs\n    self.output_state_default = [\n        output_.placeholder if hasattr(output_, \"placeholder\") else None\n        for output_ in self.outputs_with_ids\n    ]\n\n    # Define Flask server\n    server = flask.Flask(__name__)\n    external_stylesheets = [\n        theme_mapper(self.theme),\n        \"https://use.fontawesome.com/releases/v5.9.0/css/all.css\",\n    ]\n\n    source = dash.Dash\n    if self.mode is not None:\n        try:\n            from jupyter_dash import JupyterDash\n\n            source = JupyterDash\n\n        except ImportError as e:\n            self.mode = None\n            warnings.warn(str(e))\n            warnings.warn(\"Ignoring mode argument\")\n\n    self.app = source(\n        __name__,\n        external_stylesheets=external_stylesheets,\n        server=server,\n        **self.kwargs\n    )\n    # Define app title\n    self.app.title = self.title or \"\"\n\n    # Intialize layout\n    self.set_layout()\n\n    # Register callbacks\n    self.register_callback_fn()\n\n    # Keep track of the number of clicks\n    self.submit_clicks = 0\n    self.reset_clicks = 0\n    self.app_initialized = False\n\n    # Allow easier access to Dash server\n    self.server = self.app.server\n</code></pre>"},{"location":"api/#fast_dash.Fastify","title":"<code>Fastify(component, component_property, ack=None, placeholder=None, label_=None)</code>","text":"<p>Modify a Dash component to a FastComponent.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>Dash component</code> <p>Dash component that needs to be modified</p> required <code>component_property</code> <code>str</code> <p>Component property that's assigned the input or output values</p> required <code>ack</code> <code>Dash component</code> <p>Dash component that's displayed as an acknowledgement of the original component</p> <code>None</code> <code>placeholder</code> <code>type</code> <p>Placeholder value of the component.</p> <code>None</code> <code>label_</code> <code>type</code> <p>Component title.</p> <code>None</code> <p>Returns:</p> Type Description <p>Fast component: Dash component modified to make it compatible with Fast Dash.</p> Source code in <code>fast_dash/utils.py</code> <pre><code>def Fastify(component, component_property, ack=None, placeholder=None, label_=None):\n\"\"\"\n    Modify a Dash component to a FastComponent.\n\n    Args:\n        component (Dash component): Dash component that needs to be modified\n        component_property (str): Component property that's assigned the input or output values\n        ack (Dash component, optional): Dash component that's displayed as an acknowledgement of the original component\n        placeholder (type, optional): Placeholder value of the component.\n        label_ (type, optional): Component title.\n\n    Returns:\n        Fast component: Dash component modified to make it compatible with Fast Dash.\n    \"\"\"\n\n    component.component_property = component_property\n    component.ack = ack\n    component.label_ = label_\n    component.placeholder = placeholder\n\n    return component\n</code></pre>"},{"location":"api/#fast_dash.fastdash","title":"<code>fastdash(_callback_fn=None, *, layout='sidebar', mosaic=None, inputs=None, outputs=None, output_labels='infer', title=None, title_image_path=None, subheader=None, github_url=None, linkedin_url=None, twitter_url=None, navbar=True, footer=True, theme=None, update_live=False, port=8080, mode=None, minimal=False, disable_logs=False, scale_height=1, run_kwargs=dict(), kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>callback_fn</code> <code>func</code> <p>Python function that Fast Dash deploys. This function guides the behavior of and interaction between input and output components.</p> required <code>layout</code> <code>str</code> <p>App layout style. Currently supports 'base' and 'sidebar' (default).</p> <code>'sidebar'</code> <code>mosaic</code> <code>str</code> <p>Mosaic array layout, if sidebar layout is selected.</p> <code>None</code> <code>inputs</code> <code>Fast component, list of Fast components</code> <p>Components to represent inputs of the callback function. Defaults to None. If <code>None</code>, Fast Dash attempts to infer the best components from callback function's type hints and default values. In the absence of type hints, default components are all <code>Text</code>.</p> <code>None</code> <code>outputs</code> <code>Fast component, list of Fast components</code> <p>Components to represent outputs of the callback function. Defaults to None. If <code>None</code>, Fast Dash attempts to infer the best components from callback function's type hints. In the absence of type hints, default components are all <code>Text</code>.</p> <code>None</code> <code>output_labels(list</code> <code>of string labels or \"infer\" or None</code> <p>Labels given to the output components. If None, inputs are set labeled integers starting at 1 (Output 1, Output 2, and so on). If \"infer\", labels are inferred from the function signature.</p> required <code>title</code> <code>str</code> <p>Title given to the app. Defaults to None. If <code>None</code>, function name (assumed to be in snake case) is converted to title case.</p> <code>None</code> <code>title_image_path</code> <code>str</code> <p>Path (local or URL) of the app title image. Defaults to None.</p> <code>None</code> <code>subheader</code> <code>str</code> <p>Subheader of the app, displayed below the title image and title. Defaults to None. If <code>None</code>, Fast Dash tries to use the callback function's docstring instead.</p> <code>None</code> <code>github_url</code> <code>str</code> <p>GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the specified URL. Defaults to None.</p> <code>None</code> <code>linkedin_url</code> <code>str</code> <p>LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the specified URL. Defaults to None.</p> <code>None</code> <code>twitter_url</code> <code>str</code> <p>Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the specified URL. Defaults to None.</p> <code>None</code> <code>navbar</code> <code>bool</code> <p>Display navbar. Defaults to True.</p> <code>True</code> <code>footer</code> <code>bool</code> <p>Display footer. Defaults to True.</p> <code>True</code> <code>theme</code> <code>str</code> <p>Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found at https://bootswatch.com/.</p> <code>None</code> <code>update_live</code> <code>bool</code> <p>Enable hot reloading. Defaults to False.</p> <code>False</code> <code>port</code> <code>int</code> <p>Port to which the app should be deployed. Defauts to 8080.</p> <code>8080</code> <code>mode</code> <code>str</code> <p>Mode in which to launch the app. Acceptable options are <code>None</code>, <code>jupyterlab</code>, <code>inline</code>, 'external`. Defaults to None.</p> <code>None</code> <code>minimal</code> <code>bool</code> <p>Display minimal version by hiding navbar, title, title image, subheader and footer. Defaults to False.</p> <code>False</code> <code>disable_logs</code> <code>bool</code> <p>Hide app logs. Sets logger level to <code>ERROR</code>. Defaults to False.</p> <code>False</code> <code>scale_height</code> <code>float</code> <p>Height of the app container is enlarged as a multiple of this. Defaults to 1.</p> <code>1</code> <code>run_kwargs</code> <code>dict</code> <p>All values from this variable are passed to Dash's <code>.run</code> method.</p> <code>dict()</code> Source code in <code>fast_dash/fast_dash.py</code> <pre><code>def fastdash(\n    _callback_fn=None,\n    *,\n    layout=\"sidebar\",\n    mosaic=None,\n    inputs=None,\n    outputs=None,\n    output_labels=\"infer\",\n    title=None,\n    title_image_path=None,\n    subheader=None,\n    github_url=None,\n    linkedin_url=None,\n    twitter_url=None,\n    navbar=True,\n    footer=True,\n    theme=None,\n    update_live=False,\n    port=8080,\n    mode=None,\n    minimal=False,\n    disable_logs=False,\n    scale_height=1,\n    run_kwargs=dict(),\n    **kwargs\n):\n\"\"\"\n    Args:\n        callback_fn (func): Python function that Fast Dash deploys.\n            This function guides the behavior of and interaction between input and output components.\n\n        layout (str, optional): App layout style. Currently supports 'base' and 'sidebar' (default).\n\n        mosaic (str): Mosaic array layout, if sidebar layout is selected.\n\n        inputs (Fast component, list of Fast components, optional): Components to represent inputs of the callback function.\n            Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type\n            hints and default values. In the absence of type hints, default components are all `Text`.\n\n        outputs (Fast component, list of Fast components, optional): Components to represent outputs of the callback function.\n            Defaults to None. If `None`, Fast Dash attempts to infer the best components from callback function's type hints.\n            In the absence of type hints, default components are all `Text`.\n\n        output_labels(list of string labels or \"infer\" or None, optional): Labels given to the output components. If None, inputs are\n            set labeled integers starting at 1 (Output 1, Output 2, and so on). If \"infer\", labels are inferred from the function\n            signature.\n\n        title (str, optional): Title given to the app. Defaults to None. If `None`, function name (assumed to be in snake case)\n            is converted to title case.\n\n        title_image_path (str, optional): Path (local or URL) of the app title image. Defaults to None.\n\n        subheader (str, optional): Subheader of the app, displayed below the title image and title. Defaults to None.\n            If `None`, Fast Dash tries to use the callback function's docstring instead.\n\n        github_url (str, optional): GitHub URL for branding. Displays a GitHub logo in the navbar, which takes users to the\n            specified URL. Defaults to None.\n\n        linkedin_url (str, optional): LinkedIn URL for branding Displays a LinkedIn logo in the navbar, which takes users to the\n            specified URL. Defaults to None.\n\n        twitter_url (str, optional): Twitter URL for branding. Displays a Twitter logo in the navbar, which takes users to the\n            specified URL. Defaults to None.\n\n        navbar (bool, optional): Display navbar. Defaults to True.\n\n        footer (bool, optional): Display footer. Defaults to True.\n\n        theme (str, optional): Apply theme to the app. Defaults to \"JOURNAL\". All available themes can be found\n            at https://bootswatch.com/.\n\n        update_live (bool, optional): Enable hot reloading. Defaults to False.\n\n        port (int, optional): Port to which the app should be deployed. Defauts to 8080.\n\n        mode (str, optional): Mode in which to launch the app. Acceptable options are `None`, `jupyterlab`, `inline`, 'external`.\n            Defaults to None.\n\n        minimal (bool, optional): Display minimal version by hiding navbar, title, title image, subheader and footer.\n            Defaults to False.\n\n        disable_logs (bool, optional): Hide app logs. Sets logger level to `ERROR`. Defaults to False.\n\n        scale_height (float, optional): Height of the app container is enlarged as a multiple of this. Defaults to 1.\n\n        run_kwargs (dict, optional): All values from this variable are passed to Dash's `.run` method.\n    \"\"\"\n\n    def decorator_fastdash(callback_fn):\n        \"Decorator for callback_fn\"\n\n        @functools.wraps(callback_fn)\n        def wrapper_fastdash(**kwargs):\n            app = FastDash(callback_fn=callback_fn, **kwargs)\n            app.run()\n            return callback_fn\n\n        return wrapper_fastdash(\n            layout=layout,\n            mosaic=mosaic,\n            inputs=inputs,\n            outputs=outputs,\n            output_labels=output_labels,\n            title=title,\n            title_image_path=title_image_path,\n            subheader=subheader,\n            github_url=github_url,\n            linkedin_url=linkedin_url,\n            twitter_url=twitter_url,\n            navbar=navbar,\n            footer=footer,\n            theme=theme,\n            update_live=update_live,\n            mode=mode,\n            port=port,\n            minimal=minimal,\n            disable_logs=disable_logs,\n            scale_height=scale_height,\n            run_kwargs=run_kwargs,\n            **kwargs\n        )\n\n    # If the decorator is called with arguments\n    if _callback_fn is None:\n        return decorator_fastdash\n    # If the decorator is called without arguments. Use default input and output values\n    else:\n        return decorator_fastdash(_callback_fn)\n</code></pre>"},{"location":"authors/","title":"Credits","text":""},{"location":"authors/#development-lead","title":"Development Lead","text":"<ul> <li>Kedar Dabhadkar kedar@fastdash.app</li> </ul>"},{"location":"authors/#contributors","title":"Contributors","text":"<p>None yet. Why not be the first?</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/dkedar7/fast_dash/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Fast Dash could always use more documentation, whether as part of the official Fast Dash docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/dkedar7/fast_dash/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>fast_dash</code> for local development.</p> <ol> <li>Fork the <code>fast_dash</code> repo on GitHub.</li> <li>Clone your fork locally <pre><code>    $ git clone git@github.com:your_name_here/fast_dash.git\n</code></pre></li> <li>Ensure poetry is installed.</li> <li>Install dependencies and start your virtualenv:</li> </ol> <p><pre><code>    $ poetry install -E test -E doc -E dev\n</code></pre> 5. Create a branch for local development: <pre><code>    $ git checkout -b name-of-your-bugfix-or-feature\n</code></pre>    Now you can make your changes locally.  6. When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox: <pre><code>    $ tox\n</code></pre> 7. Commit your changes and push your branch to GitHub: <pre><code>    $ git add .\n    $ git commit -m \"Your detailed description of your changes.\"\n    $ git push origin name-of-your-bugfix-or-feature\n</code></pre> 8. Submit a pull request through the GitHub website.</p>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check    https://github.com/dkedar7/fast_dash/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p><pre><code>    $ pytest tests.test_fast_dash\n</code></pre> To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run:</p> <pre><code>$ poetry patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"history/","title":"History","text":""},{"location":"history/#release-024","title":"Release 0.2.4","text":""},{"location":"history/#024-2023-08-12","title":"0.2.4 (2023-08-12)","text":""},{"location":"history/#improvements","title":"Improvements","text":"<ul> <li>Improve responsiveness on mobile views.</li> <li><code>outputs</code> argument overrides callback function output hints.</li> <li>Improve pytest coverage.</li> </ul>"},{"location":"history/#release-023","title":"Release 0.2.3","text":""},{"location":"history/#023-2023-08-01","title":"0.2.3 (2023-08-01)","text":""},{"location":"history/#features","title":"Features","text":"<ul> <li>Dash components can be used as type hints directly. They are converted to Fast components during app initialization.</li> <li>Added a mosaic layout example to README.</li> <li><code>dash</code> can be imported from <code>fast_dash</code> like this: <code>from fast_dash import dash</code>.</li> </ul>"},{"location":"history/#release-022","title":"Release 0.2.2","text":""},{"location":"history/#022-2023-07-26","title":"0.2.2 (2023-07-26)","text":""},{"location":"history/#features_1","title":"Features","text":"<ul> <li>New example: Chat over docs with Embedchain.</li> </ul>"},{"location":"history/#improvements_1","title":"Improvements","text":"<ul> <li>Squashed a bug that was preventing the submit and reset buttons to sync with each other. The result is a more stable deploy using callback context.</li> </ul>"},{"location":"history/#021-2023-07-23","title":"0.2.1 (2023-07-23)","text":""},{"location":"history/#features_2","title":"Features","text":"<ul> <li>Infer output labels from the callback function or specify the `output_labels`` argument</li> <li>Show overlay when loading outputs</li> <li>Use dmc.Burger icon instead of open, close icons. Allows for a clearner sidebar open/close UX</li> <li>New examples</li> </ul>"},{"location":"history/#improvements_2","title":"Improvements","text":"<ul> <li>[Bug] Components are now initialized with the desired height</li> <li>Sidebar collapse burger is not supported in minimal layout</li> <li>Replace branding text with icon</li> <li>New pytests to improve coverage</li> </ul>"},{"location":"history/#020-2023-07-02","title":"0.2.0 (2023-07-02)","text":""},{"location":"history/#features_3","title":"Features","text":"<ul> <li>Enable sidebar layout.</li> <li>Mosaic to build custom layouts.</li> <li>Collapsible sidebar.</li> </ul>"},{"location":"history/#improvements_3","title":"Improvements","text":"<ul> <li>Sidebar layout improvements to allow flex sizing of components.</li> <li>Unit test updates to support the latest tox and poetry versions.</li> </ul>"},{"location":"history/#017-2022-08-21","title":"0.1.7 (2022-08-21)","text":"<ul> <li>Introduce Fast Dash decorator (<code>fastdash</code>) for automatic and quick deployment.</li> <li>Autoinfer input and output components from type hints and default values.</li> <li>Autoinfer title and subheader by inspecting the callback function.</li> <li>New test cases.</li> <li>Modified documentation layout and content.</li> <li>New GitHub Actions workflow to publish documentation only.</li> </ul>"},{"location":"history/#016-2022-05-09","title":"0.1.6 (2022-05-09)","text":"<ul> <li>Navbar and footer are not thinner than before, which makes them less distracting ;)</li> <li>They no longer stick to the top and bottom respectively. Scrolling on the page makes the navbar dissappear!</li> <li>Update live: New live update option! Setting the argument <code>update_live=True</code> removes <code>Submit</code> and <code>Clear</code> buttons. Any action updates the app right away.</li> <li>New spinners: Finally, Fast Dash now has loading spinners to indicate loading outputs. This comes in handy when executing long running scripts.</li> </ul>"},{"location":"history/#015-2022-04-02","title":"0.1.5 (2022-04-02)","text":"<ul> <li>Add examples: Object detection, molecule 3D viewer and UI updates to the existing examples.</li> <li>Easier fastification: Fastify now allows using a complete Dash component as the first argument.</li> <li>Tests: Increase pytest coverage to 95%.</li> </ul>"},{"location":"history/#014-2022-03-21","title":"0.1.4 (2022-03-21)","text":"<ul> <li>New component property allows setting \"acknowledgment\" component!</li> <li>Default app title is 'Prototype'.</li> <li>New UploadImage component uses another html.Img component as acknowledgment.</li> <li>Added a new Neural Style Transfer example.</li> <li>Added examples to pytest cases.</li> </ul>"},{"location":"history/#013-2022-03-11","title":"0.1.3 (2022-03-11)","text":"<ul> <li>Added 3 new examples.</li> <li>Make <code>navbar</code> and <code>footer</code> removable from the app UI.</li> <li>Updated documentation structure.</li> <li>Added Google Cloud Run deployment docs.</li> </ul>"},{"location":"history/#012-2022-03-06","title":"0.1.2 (2022-03-06)","text":"<ul> <li>Supports usage of the same FastComponent multiple times via deepcopy.</li> <li>Correct documentation typos and examples.</li> <li>Added text-to-text examples.</li> <li>Modifications to the Fastify component.</li> </ul>"},{"location":"history/#011-2022-02-28","title":"0.1.1 (2022-02-28)","text":"<ul> <li>First wide release.</li> <li>Adding input, output image functionality.</li> <li>Added mkdocs documentation.</li> </ul>"},{"location":"history/#010-2022-01-29","title":"0.1.0 (2022-01-29)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Fast Dash, run this command in your terminal:</p> <pre><code>$ pip install fast-dash\n</code></pre> <p>This is the preferred method to install Fast Dash, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for Fast Dash can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/dkedar7/fast_dash\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/dkedar7/fast_dash/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>pip install .\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#install-fast-dash","title":"Install Fast Dash","text":"<p>Let's start by installing Fast Dash. Do that by running: <pre><code>pip install fast-dash\n</code></pre></p>"},{"location":"quickstart/#simple-example","title":"Simple Example","text":"<p>Here's the simple text to text function from the home page again.</p> <pre><code>from fast_dash import fastdash\n\n@fastdash\ndef text_to_text_function(input_text):\n    return input_text\n</code></pre> <p>This should spin up your first Fast Dash app!</p> <p> </p> Simple example app"},{"location":"quickstart/#image-to-image-example","title":"Image to image example","text":"<p>Fast Dash makes it very easy to work with different types of data types and components.  For example, here's the code needed to build an app that receives an uploaded image and returns the same image.</p> <pre><code>from fast_dash import fastdash, UploadImage, Image\n\n@fastdash\ndef image_to_image(image: UploadImage) -&gt; Image:\n    return image\n</code></pre> <p>This is how the deployed app looks:</p> <p> </p> Simple image to image example app"},{"location":"quickstart/#what-else-is-possible","title":"What else is possible","text":"<p>There are many customizations that you can make with your app. These include:</p> <ul> <li>Choose from different themes</li> <li>Use any Dash component in your app</li> <li>Add custom branding and social media icons</li> <li>Customize pre-built components</li> <li>Live reload</li> <li>Minimal view</li> <li>JupyterLab inline and embedded views</li> </ul> <p>By tweaking these configurations, you can easily build web applications for a variety of use cases! Here're a selected few:</p> <p> </p> Fast Dash example gallery"},{"location":"Examples/01_simple_text_to_text/","title":"1. Simple text to text","text":"<p>This notebook is optimized to run in Google Colab.</p> In\u00a0[\u00a0]: Copied! <pre># !pip install fast-dash jupyter_dash\n</pre> # !pip install fast-dash jupyter_dash In\u00a0[1]: Copied! <pre>from fast_dash import fastdash\n</pre> from fast_dash import fastdash In\u00a0[1]: Copied! <pre>@fastdash(mode='inline', port=5000)\ndef text_to_text_function(input_text):\n    return input_text\n</pre> @fastdash(mode='inline', port=5000) def text_to_text_function(input_text):     return input_text"},{"location":"Examples/02_translate_to_multiple_languages/","title":"2. Translate to multiple languages","text":"<p>This notebook is optimized to run in Google Colab.</p> In\u00a0[\u00a0]: Copied! <pre>!pip install fast-dash jupyter_dash\n</pre> !pip install fast-dash jupyter_dash In\u00a0[1]: Copied! <pre># This demo uses Hugging Face API inference. To use this, get your token from https://huggingface.co/settings/tokens and paste it below.\nimport os\nos.environ[\"HF_TOKEN\"] = \"hf_xxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n</pre>  # This demo uses Hugging Face API inference. To use this, get your token from https://huggingface.co/settings/tokens and paste it below. import os os.environ[\"HF_TOKEN\"] = \"hf_xxxxxxxxxxxxxxxxxxxxxxxxxxx\" In\u00a0[2]: Copied! <pre>from fast_dash import fastdash\nimport requests\n\nAPI_URL = \"https://api-inference.huggingface.co/models/t5-base\"\nheaders = {\"Authorization\": f\"Bearer {os.environ.get('HF_TOKEN')}\"}\n</pre> from fast_dash import fastdash import requests  API_URL = \"https://api-inference.huggingface.co/models/t5-base\" headers = {\"Authorization\": f\"Bearer {os.environ.get('HF_TOKEN')}\"} In\u00a0[4]: Copied! <pre>@fastdash(mode='inline', port=5000)\ndef translate_to_multiple_languages(text: str = \"Translate this text to another language\", language: str = [\"German\", \"French\", \"Romanian\"]):\n    \"Uses  the T5 Base model from Hugging Face. May give incorrect results.\"\n\t\n    payload = {\"inputs\": f\"translate English to {language}: {text}\"}\n    response = requests.post(API_URL, headers=headers, json=payload)\n    translation = response.json()[0]['translation_text'] if 'translation_text' in response.json()[0] else str(response.json())\n    return translation\n</pre> @fastdash(mode='inline', port=5000) def translate_to_multiple_languages(text: str = \"Translate this text to another language\", language: str = [\"German\", \"French\", \"Romanian\"]):     \"Uses  the T5 Base model from Hugging Face. May give incorrect results.\" \t     payload = {\"inputs\": f\"translate English to {language}: {text}\"}     response = requests.post(API_URL, headers=headers, json=payload)     translation = response.json()[0]['translation_text'] if 'translation_text' in response.json()[0] else str(response.json())     return translation"},{"location":"Examples/03_chat_over_documents/","title":"3. Chat over documents with Embedchain","text":"<p>This notebook is optimized to run in Google Colab.</p> In\u00a0[1]: Copied! <pre>!pip install fast-dash embedchain jupyter_dash\n</pre> !pip install fast-dash embedchain jupyter_dash In\u00a0[2]: Copied! <pre>import os\nfrom fast_dash import fastdash, Fastify, dcc, dmc\n\nfrom embedchain import App\nfrom embedchain.config import QueryConfig\n\nfrom string import Template\n</pre> import os from fast_dash import fastdash, Fastify, dcc, dmc  from embedchain import App from embedchain.config import QueryConfig  from string import Template In\u00a0[3]: Copied! <pre># Define app configurations\nPROMPT = Template(\n\"\"\"Use the given context to answer the question at the end.\nIf you don't know the answer, say so, but don't try to make one up.\nAt the end of the answer, also give the sources as a bulleted list.\nDisplay the answer as markdown text.\n\nContext: $context\n\nQuery: $query\n\nAnswer:\"\"\"\n)\nquery_config = QueryConfig(template=PROMPT)\n</pre> # Define app configurations PROMPT = Template(     \"\"\"Use the given context to answer the question at the end. If you don't know the answer, say so, but don't try to make one up. At the end of the answer, also give the sources as a bulleted list. Display the answer as markdown text.  Context: $context  Query: $query  Answer:\"\"\" ) query_config = QueryConfig(template=PROMPT) In\u00a0[4]: Copied! <pre># Define components\nopenai_api_key_component = dmc.PasswordInput(\n    placeholder=\"API Key\",\n    description=\"Get yours at https://platform.openai.com/account/api-keys\",\n    required=True,\n)\n\nweb_page_urls_component = dmc.MultiSelect(\n    description=\"Include all the reference web URLs\",\n    placeholder=\"Enter URLs separated by commas\",\n    searchable=True,\n    creatable=True,\n)\n\ntext_component = dmc.Textarea(\n    placeholder=\"Custom text\",\n    autosize=True,\n    minRows=4,\n    description=\"Any additional information that could be useful\",\n)\n\nquery_component = dmc.Textarea(\n    placeholder=\"Write your query here\",\n    autosize=True,\n    minRows=4,\n    required=True,\n    description=\"Write your query here\",\n)\n\nanswer_component = dcc.Markdown(\n    style={\"text-align\": \"left\", \"padding\": \"1%\"}, link_target=\"_blank\"\n)\n</pre> # Define components openai_api_key_component = dmc.PasswordInput(     placeholder=\"API Key\",     description=\"Get yours at https://platform.openai.com/account/api-keys\",     required=True, )  web_page_urls_component = dmc.MultiSelect(     description=\"Include all the reference web URLs\",     placeholder=\"Enter URLs separated by commas\",     searchable=True,     creatable=True, )  text_component = dmc.Textarea(     placeholder=\"Custom text\",     autosize=True,     minRows=4,     description=\"Any additional information that could be useful\", )  query_component = dmc.Textarea(     placeholder=\"Write your query here\",     autosize=True,     minRows=4,     required=True,     description=\"Write your query here\", )  answer_component = dcc.Markdown(     style={\"text-align\": \"left\", \"padding\": \"1%\"}, link_target=\"_blank\" ) In\u00a0[4]: Copied! <pre># Define the callback function and deploy!\n\n@fastdash(mode=\"inline\", port=5000)\ndef explore_your_knowledge_base(\n    openai_api_key: openai_api_key_component,\n    web_page_urls: web_page_urls_component,\n    youtube_urls: web_page_urls_component,\n    pdf_urls: web_page_urls_component,\n    text: text_component,\n    query: query_component,\n) -&gt; answer_component:\n\"\"\"\n    Input your sources and let GPT4 find answers. Built with Fast Dash.\n    This app uses embedchain.ai, which abstracts the entire process of loading and chunking datasets, creating embeddings, and storing them in a vector database.\n    Embedchain itself uses Langchain and OpenAI's ChatGPT API.\n    \"\"\"\n    os.environ[\"OPENAI_API_KEY\"] = openai_api_key\n\n    try:\n        app = App()\n\n        if not openai_api_key:\n            return \"Did you forget adding your OpenAI API key? If you don't have one, you can get it [here](https://platform.openai.com/account/api-keys).\"\n        \n        if not query:\n            return \"Did you forget writing your query in the query box?\"\n        \n        if web_page_urls:\n            [app.add(\"web_page\", url) for url in web_page_urls]\n\n        if youtube_urls:\n            [app.add(\"youtube_video\", url) for url in youtube_urls]\n\n        if pdf_urls:\n            [app.add(\"pdf_file\", url) for url in pdf_urls]\n\n        if text:\n            app.add_local(\"text\", text)\n\n        answer = app.query(query, query_config)\n\n    except Exception as e:\n        answer = \"Oops, something went wrong! Please try again later or make a suggestion [here](https://github.com/dkedar7/embedchain-fastdash/issues).\"\n\n    return answer\n</pre> # Define the callback function and deploy!  @fastdash(mode=\"inline\", port=5000) def explore_your_knowledge_base(     openai_api_key: openai_api_key_component,     web_page_urls: web_page_urls_component,     youtube_urls: web_page_urls_component,     pdf_urls: web_page_urls_component,     text: text_component,     query: query_component, ) -&gt; answer_component:     \"\"\"     Input your sources and let GPT4 find answers. Built with Fast Dash.     This app uses embedchain.ai, which abstracts the entire process of loading and chunking datasets, creating embeddings, and storing them in a vector database.     Embedchain itself uses Langchain and OpenAI's ChatGPT API.     \"\"\"     os.environ[\"OPENAI_API_KEY\"] = openai_api_key      try:         app = App()          if not openai_api_key:             return \"Did you forget adding your OpenAI API key? If you don't have one, you can get it [here](https://platform.openai.com/account/api-keys).\"                  if not query:             return \"Did you forget writing your query in the query box?\"                  if web_page_urls:             [app.add(\"web_page\", url) for url in web_page_urls]          if youtube_urls:             [app.add(\"youtube_video\", url) for url in youtube_urls]          if pdf_urls:             [app.add(\"pdf_file\", url) for url in pdf_urls]          if text:             app.add_local(\"text\", text)          answer = app.query(query, query_config)      except Exception as e:         answer = \"Oops, something went wrong! Please try again later or make a suggestion [here](https://github.com/dkedar7/embedchain-fastdash/issues).\"      return answer"},{"location":"Examples/neural_style_transfer/","title":"Neural style transfer","text":"<p>Coming soon ...</p>"},{"location":"User%20guide/build/","title":"Under the hood","text":"<p>Different configurations that go into building a Fast Dash app determine the UI components, themes, how the app is deployed and the nature of user interaction.</p> <p>The intention of this document is to introduce all those options so that you can make the most of Fast Dash.</p>"},{"location":"User%20guide/build/#building-your-fast-dash-app","title":"Building your Fast Dash app","text":"<p>There are two ways to build a Fast Dash app:</p> <ol> <li>Decorating Python functions with the <code>@fastdash</code> decorator</li> </ol> <p><pre><code>from fast_dash import fastdash\n\n@fastdash(...)\ndef your_function(...):\n    ...\n</code></pre> 2. Instantiating an object of the <code>FastDash</code> class</p> <pre><code>from fast_dash import FastDash\n\ndef your_function(...):\n    ...\n\napp = FastDash(callback_fn=your_function, ...)\napp.run()\n</code></pre> <p>Using the <code>@fastdash</code> decorator is the quickest way to deploy Fast Dash apps but the <code>FastDash</code> class gives us access to the other Fast Dash internals and allows us to tweak them as you see fit.</p> <p>Whereas the <code>fastdash</code> decorator deploys our app at the time of defining our functions, the <code>FastDash</code> class objects are equivalent to Flask's server objects, which allow us to deploy our app later. But we'll understand these difference better throughout the remainder of this document.</p> <p>Note</p> <p>Both the <code>@fastdash</code> decorator and the <code>FastDash</code> class objects are functionally equivalent. The <code>@fastdash</code> decorator is internally powered by the <code>FastDash</code> class. Using decorators saves us the need to specify callback functions as the first argument when defining the <code>FastDash</code> object.</p> <p>Let's first understand how to build Fast Dash apps using the <code>@fastdash</code> decorator and then extend these ideas to the <code>FastDash</code> class.</p>"},{"location":"User%20guide/build/#1-fastdash-decorator","title":"1. <code>@fastdash</code> decorator","text":""},{"location":"User%20guide/build/#whats-a-decorator","title":"What's a decorator?","text":"<p>In a nutshell, Python decorators are function wrappers that enrich the functionaltiy of Python functions. Here's an in-depth write-up on Python decorators, what they are and how to build them. But all that we need to know for now is that decorators, themselves, are Python functions which take other functions as arguments and add extra functionality to them.</p> <p>The <code>@fastdash</code> decorator is also just a function (read more here about the implementation in the Modules section) that takes the callback function as the first argument and designs a web app around it. But instead of explicitly specifying the name of the callback function as the first argument, we use this syntax instead:</p> <pre><code>@fastdash(...)\ndef your_function(...)\n    ...\n</code></pre>"},{"location":"User%20guide/build/#how-to-use-fastdash","title":"How to use <code>@fastdash</code>","text":"<p>After we have a Python function that runs without errors, there are only two things we need to do:</p>"},{"location":"User%20guide/build/#11-specify-the-input-and-output-type-hints","title":"1.1. Specify the input and output type hints","text":"<p>Fast Dash uses these type hints to determine which components to use. For example, an input with the type hint <code>int</code> will need an input that allows entering integers or a slider. Similarly, an image input will need an upload image or a camera component.</p> <p>What are type hints?</p> <p>First introduced in Python 3.5, type hints are mainly meant to be used IDEs and linters to raise data type mismatch warnings. They not executed during runtime and any errors with type hinting doesn't affect the execution of the function itself. Read more about Python type hints here.</p> <pre><code>def your_function(a: str, b: int, c: list) -&gt; str:\n    ...\n</code></pre> <p>Fast Dash uses this flexbility with defining type hints to allow using Fast Components as hints. More on this in the documentation for Fast Components.</p> <p>So far, Fast Dash understands two types of type hints\u2014one, Python in-built data type classes (<code>str</code>, <code>int</code>, <code>float</code>, <code>list</code>, <code>dict</code>, etc.), and two, Fast Components.</p> <p>In addition to type hints, the input arguments can also have default values. In the example below, the default values of integer <code>a</code> is <code>Fast</code>, that of <code>b</code> is <code>5</code> and <code>c</code> is a <code>list</code> with a default value of <code>[1, 2, 3]</code>.</p> <pre><code>def your_function(a: str = \"Fast\", b: int = 5, c: list = [1, 2, 3]) -&gt; str:\n...\n</code></pre> <p>Fast Dash determines the best Fast Components to use for each input from their hints and default values. Details about which combination of these values result into what components are in the patterns documentation.</p> <p>Fast Components are also valid type hints for Fast Dash. Instead of depending on the hints and default values, using Fast Components is a direct way of telling Fast Dash which components to use. In the example below, <code>UploadImage</code> and <code>Slider</code> are in-built Fast Component wrappers for <code>dcc.Upload</code> and <code>dcc.Slider</code> respectively. The function returns a text field, represented using the <code>html.H1</code> component by default.</p> <pre><code>from fast_dash import fastdash, UploadImage, Slider\n@fastdash\ndef your_function(image: UploadImage, number: Slider):\n...\n</code></pre>"},{"location":"User%20guide/build/#12-modify-default-settings","title":"1.2. Modify default settings","text":"<p>These include multiple options like the theme of the app, social media branding links, and subheaders.</p>"},{"location":"User%20guide/build/#title","title":"Title","text":"<p>Fast Dash is able to read the title of our callback function and display it at the top of the app. Titles resolve the best if the function name is written in snake case.</p> <p>For example, <code>your_function</code> resolves to <code>Your Function</code> but <code>yourFunction</code> will resolve to <code>YourFunction</code>. For such cases, we can manually specify the title as an argument to <code>@fastdash</code>.</p> <pre><code>@fastdash(title=\"Your Function\")\ndef yourFunction(...):\n    ...\n</code></pre>"},{"location":"User%20guide/build/#subheader","title":"Subheader","text":"<p>The subheader shows up below the title at the top of the page in an italicized font. Fast Dash also attempts to infer this from the function docstring. But we can also overwrite this in the <code>subheader</code> argument to <code>@fastdash</code>.</p> <pre><code>@fastdash(title=\"Your Function\", \nsubheader=\"Coolest Function Ever\") # Either here\ndef yourFunction(...):\n\"Coolest Function Ever\" # or here\n...\n</code></pre>"},{"location":"User%20guide/build/#title-image-path","title":"Title image path","text":"<p>Fast Dash optionally displays an icon image below the title. The image path can be set with the argument <code>title_image_path</code>.</p> <pre><code>@fastdash(title_image_path=\"https://tinyurl.com/5fw564ux\")\ndef yourFunction(...):\n    ...\n</code></pre>"},{"location":"User%20guide/build/#social-media-urls","title":"Social media URLs","text":"<p>We can also set social media URLs (Fast Dash supports GitHub, LinkedIn and Twitter URLs so far) in the navigation bar at the top by setting the arguments <code>github_url</code>, <code>linkedin_url</code>, and <code>twitter_url</code> respectively.</p> <pre><code>@fastdash(github_url=\"github.com/dkedar7\",\nlinkedin_url=\"linkedin.com/in/dkedar7\",\ntwitter_url=\"twitter.com/dkedar7\")\ndef yourFunction(...):\n    ...\n</code></pre>"},{"location":"User%20guide/build/#navbar-and-footer-visibility","title":"Navbar and footer visibility","text":"<p>We can hide the navbar and the footer by controlling the boolean <code>navbar</code> and <code>footer</code> arguments respectively. These are set to <code>True</code> by default.</p> <pre><code>@fastdash(navbar=False,\nfooter=False)\ndef yourFunction(...):\n    ...\n</code></pre>"},{"location":"User%20guide/build/#theme","title":"Theme","text":"<p>The default theme that Fast Dash uses is called <code>JOURNAL</code> but there are more themes that Fast Dash supports. See the full list of supported themes at bootswatch.com.</p> <pre><code>@fastdash(theme='JOURNAL')\ndef yourFunction(...):\n    ...\n</code></pre>"},{"location":"User%20guide/build/#update-live","title":"Update Live","text":"<p>By default, Fast Dash apps load lazily. That means once the user enters inputs, the outputs upadte only after they click <code>Submit</code>. But on setting the <code>update_live</code> argument to <code>True</code>, the <code>Submit</code> and <code>Reset</code> button disappear and the outputs update instantaneously. This feature is also popularly known as hot reloading.</p> <pre><code>@fastdash(update_live=True)\ndef yourFunction(...):\n    ...\n</code></pre>"},{"location":"User%20guide/build/#mode","title":"Mode","text":"<p><code>mode</code> is a very interesting argument that decides how Fast Dash apps are deployed. There are currently four supported modes. The default mode is <code>None</code> but the other possible <code>mode</code> options specified below require the <code>jupyter-dash</code> package installed. Read more about the package here.</p>"},{"location":"User%20guide/build/#none","title":"<code>None</code>","text":"<p>By default, <code>mode</code> is set to <code>None</code> which deploys the app at the chosen port (default Dash port is 5000).</p>"},{"location":"User%20guide/build/#jupyterlab","title":"<code>JupyterLab</code>","text":"<p>When <code>mode</code> is <code>JupyterLab</code>, the app is deployed within Jupyter environments (e.g. classic Notebook, JupyterLab, Visual Studio Code notebooks, nteract, PyCharm notebooks). The app opens as a separate tab inside JupyterLab.</p>"},{"location":"User%20guide/build/#inline","title":"Inline","text":"<p>With this <code>mode</code>, Fast Dash uses an IFrame to display the application inline in the notebook.</p>"},{"location":"User%20guide/build/#external","title":"External","text":"<p>This behaves like the default mode with the only difference that the app runs outside your Jupyter notebook environment. Fast Dash display a link that where you can navigate to see how the deployment will look to end users after this application is depoyed to production.</p> <pre><code>@fastdash(mode='jupyterlab')\ndef yourFunction(...):\n    ...\n</code></pre>"},{"location":"User%20guide/build/#minimal","title":"Minimal","text":"<p>Sometimes, we just want to see how pur Python functions behaves without worrying about the theme, or the presence of the navbar or footer. If we set <code>minimal</code> to True, Fast Dash only displays the input and output components and hides the rest.</p> <pre><code>@fastdash(minimal=True)\ndef yourFunction(...):\n    ...\n</code></pre>"},{"location":"User%20guide/build/#disable-logs","title":"Disable logs","text":"<p>Under the hood, setting <code>disable_logs</code> to <code>True</code> disables the messy log output that sometimes follows a successful Fast Dash deployment. This feature is very handy especially when we are deploying apps inside Jupyter enviroments. On the flip side, we lose a lot of useful debugging information.</p> <pre><code>@fastdash(disable_logs=True)\ndef yourFunction(...):\n    ...\n</code></pre>"},{"location":"User%20guide/build/#2-fastdash-objects","title":"2. <code>FastDash</code> objects","text":"<p>The <code>FastDash</code> class powers all Fast Dash automated app development and deployment. In fact, as mentioned in a note before, all that the <code>@fastdash</code> decorator does under the hood is instantiate a <code>FastDash</code> objects and call the <code>.run()</code> method.</p> <p>In other words, all the discussion and arguments that can be passed to the <code>@fastdash</code> decorator are valid to the <code>FastDash</code> class as well. But unlike the <code>@fastdash</code> decorator, <code>FastDash</code> class gives us access to other Fast Dash internals and flexibility with respect to deploying our apps.</p> <p>Here's how to define and deploy a Fast Dash app using <code>FastDash</code>. Note the highlighted differences in the code.</p> <pre><code>from fast_dash import FastDash\n\ndef your_function(...):\n    ...\n\napp = FastDash(callback_fn=your_function, ...)\napp.run()\n</code></pre> <p>We are able to logically separate function definition and deployment and additionally can modify configurations beyond what <code>FastDash</code>'s default arguments allow.</p> <p>For example, we are able to bring our own components and layout designs by altering the UI development code which can be accessed using <code>app.app.layout</code>.</p> <p>In the next section, we'll see what Fast Components are, what separates them from other Dash components and how we can easily modify Dash components to make them compatible with Fast Dash.</p>"},{"location":"User%20guide/components/","title":"Fast Components","text":"<p>Fast components are the UI components that represent the input and outputs elements in a Fast Dash app. In fact, they are Dash components modified by adding a new <code>component_property</code> attribute, in addition to a few other optional properties. Fast Dash provides a <code>Fastify</code> function to transform Dash components into Fast components.</p> <p>Fast Dash borrows the concept of <code>component_property</code> from Dash. <code>component_property</code> is the answer to the question - \"Which property of a component should be assigned the value returned by the callback function?\"</p> <p>For example, if the first argument of a Fast Dash callback function is a <code>str</code> and we want to represent this input using a component that allows users to enter text. Say we decide to use the <code>dbc.Input()</code> Dash component. By reading the documentation of the component here, you'll realize that we must update the <code>value</code> property of <code>dbc.Input()</code> for it work as expected. And therefore, when defining a Fast component for this input we'd use <code>component_property=\"value\"</code>.</p> <p>We use this design and the fact that Fast Dash allows using Fast components as type hints, in addition of standard Python data types, to write a simple app that takes text entered by users as the first input.</p> <pre><code>from fast_dash import Fastify, dbc\n\ntext_input_component = Fastify(component=dbc.Input(), component_property=\"value\")\n@fastdash\ndef your_function(input_text: text_input_component, ...):\n...\n</code></pre> <p>Note</p> <p>Note that Fast Dash offers prebuilt Fast Components for common use cases. Some of them are  - <code>Text</code>: To allow entering input text - <code>Slider</code>: For integer inputs - <code>Upload</code>: Used to upload documents - <code>UploadImage</code>: Special case of <code>Upload</code> used to upload images - <code>Image</code>: Used to display image variables returned by callback functions. - <code>Graph</code>: Display Plotly graphs</p> <p>These can be easily imported into your script like this:</p> <pre><code>from fast_dash import Text, Slider, Upload, UploadImage, Image, Graph\n</code></pre> Dash components vs Fast components <p>If you have used Dash, you will know that we have to specify a <code>component_property</code> to Dash's <code>Input</code> and <code>Output</code> methods when defining our callback functions (during runtime). In other words, you can develop Dash UI before writing your callback functions.</p> <p>On the contrary, Fast Dash infers components (when not specified) by studying the underlying callback function, particularly its type hints and default values. For that reason, it becomes essential for us to specify the <code>component_property</code> before we define our callback function.</p>"},{"location":"User%20guide/components/#how-are-they-different-from-dash-components","title":"How are they different from Dash components","text":""},{"location":"User%20guide/components/#how-to-transform-dash-components-into-fast-components","title":"How to transform Dash components into Fast components","text":""},{"location":"User%20guide/components/#the-special-acknowledgement-ack-components","title":"The special acknowledgement (ack) components","text":""},{"location":"User%20guide/components/#some-examples","title":"Some examples","text":""},{"location":"User%20guide/deployment/","title":"Deployment","text":"<p>Fast Dash apps can be deployed as regular Dash apps. A universal and hence the preferred method to deploy is to containers the applications and then deploy to a public cloud endpoint.</p> <p>Here're the general steps involved with the deployment process:</p> <ol> <li>Add a <code>Dockerfile</code> in the same directory that contains the main Fast Dash app module.</li> <li>Create <code>wsgi.py</code> Python script in the same path.</li> <li>Build and run Docker container.</li> </ol> <p>The recommended directory structure is this:</p> <pre><code>root\\\n- app.py\n- requirements.txt\n- ....py  # (Other scripts that your Fast Dash app needs)\n</code></pre> <p>With these steps in mind, let's see how we can deploy our simple text-to-text Fast Dash app to the most used cloud services.</p>"},{"location":"User%20guide/deployment/#1-google-cloud-run","title":"1. Google Cloud Run","text":""},{"location":"User%20guide/deployment/#step-1-get-started-with-google-cloud","title":"Step 1. Get started with Google Cloud","text":"<p>Get started with Google Cloud here. If you already have an account, proceed to the console and select Cloud Run from the list of services.</p> <p>Although not mandatory, it's highly recommended to get access to the <code>gcloud</code> command line utility. The <code>gcloud</code> CLI reduces the deployment down to just a single line of code.</p>"},{"location":"User%20guide/deployment/#step-2-add-wsgipy","title":"Step 2. Add <code>wsgi.py</code>","text":"<p>Add <code>wsgi.py</code> Python script to the current directory. Modify it and add the following lines:</p> <pre><code>from app import app\nserver = app.app.server\n</code></pre> <p><code>server</code> is the Flask object that gets deployed. We need to isolate it from the rest of the app code so that we can instruct <code>gunicorn</code> in the next step to deploy it inside our Docker container.</p>"},{"location":"User%20guide/deployment/#step-3-create-dockerfile","title":"Step 3. Create <code>Dockerfile</code>","text":"<p>Create a new file in the current path and modify it to reflect the following:</p> <pre><code>FROM python:3.9-slim\n\n# Copy local code to the container image.\nADD . /app\nWORKDIR /app\n\n# Install production dependencies.\nRUN pip3 install --no-cache-dir -r requirements.txt\n\n# Deploy app using gunicorn\nCMD exec gunicorn wsgi:server --bind :$PORT\n</code></pre>"},{"location":"User%20guide/deployment/#step-4-modify-requirementstxt","title":"Step 4. Modify <code>requirements.txt</code>","text":"<p>Add <code>gunicorn</code> to the list of dependencies in <code>requirements.txt</code>.</p> <p>At this stage, the root path of your app should have this structure:</p> <pre><code>root\\\n- app.py\n- requirements.txt\n- wsgi.py\n- Dockerfile\n- ....py  # (Other scripts that your Fast Dash app needs)\n</code></pre>"},{"location":"User%20guide/deployment/#step-5-deploy","title":"Step 5. Deploy! \ud83d\ude80","text":"<p>If the <code>gcloud</code> CLI was correctly installed in step 1, simply run this command from the root of your project directory:</p> <pre><code>gcloud run deploy\n</code></pre> <p>You will be asked to enter a few different settings for your app. Read Google Cloud Run's documentation here to understand what each of them mean.</p> <p>Generally, choosing the following settings is acceptable:</p> <ol> <li>Source code location: Enter the directory with <code>Dockerfile</code>. If you are already in the project <code>root</code>, then this directory is preselected. Simply hit <code>Enter</code>.</li> <li>Service name: Type the app name of hit <code>Enter</code> to select default.</li> <li>Please specify a region: Choose the number corresponding to your nearest region.</li> <li>Allow unauthenticated invocations to: Select <code>y</code> if you understand and are okay with the repercussions.</li> </ol> <p>That's it! Google Cloud will build your app inside a Docker container and display the URL here once it's ready. The entire operation can take upto 5 minutes for simple applications. The build time highly depends on the complexity of your app and the number of dependencies.</p>"},{"location":"User%20guide/patterns/","title":"Common patterns","text":"<p>Coming soon ...</p>"}]}